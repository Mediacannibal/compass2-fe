{"version":3,"sources":["webpack:///./src/utils/axios.ts","webpack:///./src/utils/headers.js","webpack:///./src/utils/api/getinstance.ts","webpack:///./src/utils/api/editinstance.ts","webpack:///./src/utils/api/postinstance.ts","webpack:///./src/utils/api/deleteinstance.ts","webpack:///./src/store/InstanceStore.ts"],"names":["instance","axios","create","baseURL","headers","auth","JSON","parse","getinstance","get","String","localStorage","getItem","editinstance","id","data","put","postinstance","post","deleteinstance","instanceStore","Store","instancestore","useStore","setinstance","loadinstance","then","results","res","console","log","oldArray","err","oldarr","map","obj","x","i_icon","mascot","i_title","i_stitle","i_body","i_bodytype","i_bodyoptions","locations","i_media","i_misc","filter","ele"],"mappings":"0FAAA,aAEMA,EAFN,OAEiBC,EAAMC,OAAO,CAC5BC,QAAS,qCAGIH,O,iCCaAI,IAdC,SAACC,GACb,OAAa,OAATA,GAAyB,SAATA,EACV,CACL,OAAU,oBAGL,CACL,OAAU,mBACV,cAAiBA,EAAO,SAAH,OAAYC,KAAKC,MAAMF,IAAU,M,2NCV/D,IAKeG,EALE,e,EAAA,G,EAAA,yBAAG,6GAEFP,IAAMQ,IAAN,gCAA2C,CAAE,QAAWL,YAAQM,OAAOC,aAAaC,QAAQ,iBAF1F,kF,+KAAH,qD,yHCAjB,IAKeC,EALG,e,EAAA,G,EAAA,yBAAG,WAAOC,EAASC,GAAhB,gGAEHd,IAAMe,IAAN,kCAAqCF,EAArC,KAA4CC,EAAM,CAAE,QAAWX,YAAQM,OAAOC,aAAaC,QAAQ,iBAFhG,kF,+KAAH,wD,yHCAlB,IAKeK,EALG,e,EAAA,G,EAAA,yBAAG,WAAOF,GAAP,gGAEHd,IAAMiB,KAAN,gCAA4CH,EAAM,CAAE,QAAWX,YAAQM,OAAOC,aAAaC,QAAQ,iBAFhG,kF,+KAAH,sD,yHCAlB,IAKeO,EALK,e,EAAA,G,EAAA,yBAAG,WAAOL,GAAP,gGAELb,IAAK,OAAL,kCAAwCa,EAAxC,KAA+C,CAAE,QAAWV,YAAQM,OAAOC,aAAaC,QAAQ,iBAF3F,kF,+KAAH,sD,6mDCEb,IA+CMQ,EAAgB,IAAIC,KAA8B,GAElDC,EAAgB,WACzB,QAAgCC,YAASH,GAAzC,GAAOpB,EAAP,KAAiBwB,EAAjB,KAEA,MAAO,CACHxB,WAAUwB,cAEJC,aAHH,WAGkB,+IACXjB,IAAckB,MAChB,SAACX,GAEGS,EAAYT,EAAKA,KAAKY,YAJb,8CAQfV,aAXH,SAWgBF,GAAW,+IACpBE,EAAaF,GAAMW,MAAK,SAACE,GAC3BC,QAAQC,IAAIF,GACZJ,GAAY,SAACO,GAAD,kBAAuBA,GAAvB,CAAiCH,EAAIb,aAF/C,OAGG,SAACiB,GACNH,QAAQC,IAAIE,MALU,8CAQxBnB,aAnBH,SAmBgBC,EAASC,GAAW,+IAC7BF,EAAaC,EAAIC,GAAMW,MAAK,SAACE,GAC/BC,QAAQC,IAAIF,GACZJ,GAAY,SAACS,GACT,OAAQA,GAAWA,EAAOC,KAAI,SAACC,GAC3B,IACQC,EAaR,OAAQ1B,OAAOyB,EAAIrB,MAAQJ,OAAOI,KAb1BsB,EAawCD,GAZ1CE,OAAStB,EAAKsB,OAChBD,EAAEE,OAASvB,EAAKuB,OAChBF,EAAEG,QAAUxB,EAAKwB,QACjBH,EAAEI,SAAWzB,EAAKyB,SAClBJ,EAAEK,OAAS1B,EAAK0B,OAChBL,EAAEM,WAAa3B,EAAK2B,WACpBN,EAAEO,cAAgB5B,EAAK4B,cACvBP,EAAEQ,UAAY7B,EAAK6B,UACnBR,EAAES,QAAU9B,EAAK8B,QACjBT,EAAEU,OAAS/B,EAAK+B,OACTV,GAE4CD,WAlB7D,OAqBG,SAACH,GACNH,QAAQC,IAAIE,MAvBmB,8CA0BjCb,eA7CH,SA6CkBL,GAAS,+IACpBK,EAAeL,GAAIY,MAAK,SAACE,GAC3BC,QAAQC,IAAIF,GACZJ,EAAYxB,GAAYA,EAAS+C,QAAO,SAAAC,GAAG,OAAIA,EAAIlC,KAAOA,SAFxD,OAGG,SAACc,GACNC,QAAQC,IAAIF,MALU","file":"1.2cf2cbc93621760f3356.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://apidc.mediacannibal.com/'\r\n});\r\n\r\nexport default instance;","/**\r\n * Created by rozer on 8/16/2018.\r\n */\r\n\r\n\r\nconst headers = (auth) => {\r\n    if (auth === null ||auth === \"null\" )\r\n      return ({\r\n         'Accept': 'application/json',\r\n      })\r\n   else\r\n      return ({\r\n         'Accept': 'application/json',\r\n         'Authorization': auth ? `Token ${JSON.parse(auth)}` : ''\r\n      })\r\n};\r\n\r\n\r\n\r\nexport default headers\r\n","import axios from '../axios';\r\nimport headers from '../headers';\r\n\r\nconst getinstance = async () => {\r\n\r\n    return (await axios.get(`api/v1/appdata/instance/info/`, { \"headers\": headers(String(localStorage.getItem(\"AuthToken\"))) }));\r\n};\r\n\r\nexport default getinstance;","import axios from '../axios';\r\nimport headers from '../headers';\r\n\r\nconst editinstance = async (id: any, data: any) => {\r\n\r\n    return (await axios.put(`api/v1/appdata/instance/${id}/`, data, { \"headers\": headers(String(localStorage.getItem(\"AuthToken\"))) }));\r\n};\r\n\r\nexport default editinstance;","import axios from '../axios';\r\nimport headers from '../headers';\r\n\r\nconst postinstance = async (data: any) => {\r\n\r\n    return (await axios.post(`api/v1/appdata/instance/info/`, data, { \"headers\": headers(String(localStorage.getItem(\"AuthToken\"))) }));\r\n};\r\n\r\nexport default postinstance;","import axios from '../axios';\r\nimport headers from '../headers';\r\n\r\nconst deleteinstance = async (id: any) => {\r\n\r\n    return (await axios.delete(`api/v1/appdata/instance/${id}/`, { \"headers\": headers(String(localStorage.getItem(\"AuthToken\"))) }));\r\n};\r\n\r\nexport default deleteinstance;","import { Store, useStore } from \"./Store\";\r\nimport getinstance from \"../utils/api/getinstance\";\r\nimport editinstance from \"../utils/api/editinstance\";\r\nimport postinstance from \"../utils/api/postinstance\";\r\nimport deleteinstance from \"../utils/api/deleteinstance\";\r\nexport class instanceItem {\r\n\r\n    id: String;\r\n    i_icon: String;\r\n    mascot: String;\r\n    i_title: String;\r\n    i_stitle: String;\r\n    i_body: String;\r\n    i_bodytype: String;\r\n    i_bodyoptions: String;\r\n    locations: String;\r\n    i_media: String;\r\n    i_misc: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        i_icon: String;\r\n        mascot: String;\r\n        i_title: String;\r\n        i_stitle: String;\r\n        i_body: String;\r\n        i_bodytype: String;\r\n        i_bodyoptions: String;\r\n        locations: String;\r\n        i_media: String;\r\n        i_misc: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n    }) {\r\n        this.id = o.id;\r\n        this.i_icon = o.i_icon;\r\n        this.mascot = o.mascot;\r\n        this.i_title = o.i_title;\r\n        this.i_stitle = o.i_stitle;\r\n        this.i_body = o.i_body;\r\n        this.i_bodytype = o.i_bodytype;\r\n        this.i_bodyoptions = o.i_bodyoptions;\r\n        this.locations = o.locations;\r\n        this.i_media = o.i_media;\r\n        this.i_misc = o.i_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n    }\r\n}\r\n\r\nexport const instanceStore = new Store<instanceItem[] | false>(false);\r\n\r\nexport const instancestore = () => {\r\n    const [instance, setinstance] = useStore(instanceStore);\r\n\r\n    return {\r\n        instance, setinstance,\r\n\r\n        async loadinstance() {\r\n            await getinstance().then(\r\n                (data) => {\r\n                    // console.log(\"kjsaksahdfadfasdfas\", data);\r\n                    setinstance(data.data.results);\r\n                }\r\n            )\r\n        },\r\n        async postinstance(data: any) {\r\n            await postinstance(data).then((res) => {\r\n                console.log(res);\r\n                setinstance((oldArray: any) => [...oldArray, res.data]);\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async editinstance(id: any, data: any) {\r\n            await editinstance(id, data).then((res) => {\r\n                console.log(res);\r\n                setinstance((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.i_icon = data.i_icon\r\n                            x.mascot = data.mascot\r\n                            x.i_title = data.i_title\r\n                            x.i_stitle = data.i_stitle\r\n                            x.i_body = data.i_body\r\n                            x.i_bodytype = data.i_bodytype\r\n                            x.i_bodyoptions = data.i_bodyoptions\r\n                            x.locations = data.locations\r\n                            x.i_media = data.i_media\r\n                            x.i_misc = data.i_misc\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async deleteinstance(id: any) {\r\n            await deleteinstance(id).then((res) => {\r\n                console.log(res);\r\n                setinstance(instance && instance.filter(ele => ele.id !== id))\r\n            }).catch((res) => {\r\n                console.log(res);\r\n            })\r\n        }\r\n    }\r\n}"],"sourceRoot":""}