{"version":3,"sources":["webpack:///./src/store/ActiveInstance.ts","webpack:///./src/store/GamedatalogStore.ts","webpack:///./src/store/LanguageStore.ts","webpack:///./src/store/InstanceStore.ts","webpack:///./src/store/ActivePopup.ts","webpack:///./src/store/ActiveLevelDetailsStore.ts","webpack:///./src/store/ActiveSubLevelDetailsStore.ts","webpack:///./src/store/levelStore.ts","webpack:///./src/store/logoStore.ts","webpack:///./src/store/logopositionStore.ts","webpack:///./src/store/leveldetailsStore.ts","webpack:///./src/store/sublevelStore.ts"],"names":["ActiveInstance1","Store","useActiveInstance","useStore","ActiveInstance","setActiveInstance","GamedatalogStore","Gamedatastore","Gamedatalog","setGamedatalog","loadGamedatalog","getGamedatalog","then","data","console","log","loadGamedatalogfilter","level","user","LanguageStore","key","value","useLanguageStore","Language","setLanguage","instanceStore","instanceStore1","instancestore","instance","setinstance","activeInstanceData","setactiveInstanceData","loadinstance","getinstance","results","loadinstancewithid","id","postinstance","res","oldArray","err","editinstance","oldarr","map","obj","x","String","i_icon","mascot","i_title","i_stitle","i_body","i_bodytype","i_bodyoptions","locations","i_media","i_misc","color_field","deleteinstance","filter","ele","ActivePopup1","useActivePopup","ActivePopup","setActivePopup","leveldetailsStore","userActiveLevelDetailsStore","ActiveLevelDetails","setActiveLevelDetails","loadActiveleveldetails","getleveldetailsbyid","loadActiveleveldetailsbyqr","getleveldetailsbyqrid","userActiveSubLevelDetailsStore","ActiveSubLevelDetails","setActiveSubLevelDetails","loadActiveSubleveldetails","getsublevel_data_byid","levelStore","levelstore","setlevel","loadlevel","getlevel","loadlevelwithid","postlevel","editlevel","l_level","instance_id","l_icon","l_qrcode","l_title","l_stitle","l_body","l_bodytype","l_bodyoptions","l_media","l_misc","completion_image","clue_image","l_qr_id","unlock_after","deletelevel","logoStore","logostore","logo","setlogo","loadlogo","getlogo","loadlogowithid","postlogo","editlogo","i_logo","position","section","deletelogo","logopositionStore","logopositionstore","logoposition","setlogoposition","loadlogo_arrayposition","getlogo_arrayposition","loadlogo_arrayposition_iid","getlogo_arrayposition_iid","leveldetailslstore","leveldetails","setleveldetails","loadleveldetails","getleveldetails","sublevelStore","sublevel1Store","sublevelstore","sublevel","setsublevel","sublevel1","setsublevel1","loadsublevel","getsublevel","loadsublevelwithid","instanceid","levelid","postsublevel","editsublevel","level_id","sl_types","sl_icon","sl_title","sl_stitle","sl_body","sl_bodytype","sl_bodyoptions","sl_misc","sl_media","deletesublevel","loadsublevel1_data_byid"],"mappings":"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","file":"26.1a419288c1b90f52c956.js","sourcesContent":["import { Store, useStore } from \"./Store\";\n\n// export const authStore = new Store<null | string>(typeof localStorage === \"undefined\" ? null : localStorage['jwt']);\n\nexport const ActiveInstance1 = new Store<Number>(-1);\n\nexport const useActiveInstance = () => {\n\n    const [ActiveInstance, setActiveInstance] = useStore(ActiveInstance1);\n\n    return {\n        ActiveInstance, setActiveInstance,\n    }\n};","import { Store, useStore } from \"./Store\";\nimport getGamedatalog from \"../utils/api/getGamedatalog\";\n\nexport class GamedatalogItem {\n\n    id: String;\n    level_sublevel_id: String;\n    level_sublevel: String;\n    data: String;\n    misc: String;\n    status: String;\n    created_at: String;\n    updated_at: String;\n    user: any;\n    instance: any;\n\n    constructor(o: {\n        id: String;\n        level_sublevel_id: String;\n        level_sublevel: String;\n        data: String;\n        misc: String;\n        status: String;\n        created_at: String;\n        updated_at: String;\n        user: any;\n        instance: any\n\n    }) {\n        this.id = o.id;\n        this.level_sublevel_id = o.level_sublevel_id;\n        this.level_sublevel = o.level_sublevel;\n        this.data = o.data;\n        this.misc = o.misc;\n        this.status = o.status;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.user = o.user;\n        this.instance = o.instance;\n    }\n}\n\nexport const GamedatalogStore = new Store<GamedatalogItem[] | false>(false);\n\nexport const Gamedatastore = () => {\n    const [Gamedatalog, setGamedatalog] = useStore(GamedatalogStore);\n\n    return {\n        Gamedatalog, setGamedatalog,\n\n        async loadGamedatalog() {\n            await getGamedatalog(\"\", \"\").then(\n                (data) => {\n                    console.log(\">>> data.data.resultsdata.data.results :\", data.data);\n                    setGamedatalog(data.data);\n                }\n            )\n        },\n        async loadGamedatalogfilter(level: any, user: any) {\n            await getGamedatalog(level, user).then(\n                (data) => {\n                    console.log(\">>> data.data.resultsdata.data.results :\", data.data);\n                    setGamedatalog(data.data);\n                }\n            )\n        },\n    }\n}","import { Store, useStore } from \"./Store\";\n\n// export const authStore = new Store<null | string>(typeof localStorage === \"undefined\" ? null : localStorage['jwt']);\n\nexport const LanguageStore = new Store<{ key: string, value: string }>({ key: \"ENGLISH\", value: \"ENGLISH\" });\n\n\nexport const useLanguageStore = () => {\n    const [Language, setLanguage] = useStore(LanguageStore);\n\n    return {\n        Language, setLanguage,\n\n    }\n};","import { Store, useStore } from \"./Store\";\nimport getinstance from \"../utils/api/getinstance\";\nimport editinstance from \"../utils/api/editinstance\";\nimport postinstance from \"../utils/api/postinstance\";\nimport deleteinstance from \"../utils/api/deleteinstance\";\nexport class instanceItem {\n\n    id: String;\n    i_icon: String;\n    mascot: String;\n    i_title: String;\n    i_stitle: String;\n    i_body: String;\n    i_bodytype: String;\n    i_bodyoptions: String;\n    locations: String;\n    i_media: String;\n    i_misc: String;\n    created_at: String;\n    updated_at: String;\n    color_field: String;\n    TextData: any;\n\n    constructor(o: {\n        id: String;\n        i_icon: String;\n        mascot: String;\n        i_title: String;\n        i_stitle: String;\n        i_body: String;\n        i_bodytype: String;\n        i_bodyoptions: String;\n        locations: String;\n        i_media: String;\n        i_misc: String;\n        created_at: String;\n        updated_at: String;\n        color_field: String;\n        TextData: any;\n\n    }) {\n        this.id = o.id;\n        this.i_icon = o.i_icon;\n        this.mascot = o.mascot;\n        this.i_title = o.i_title;\n        this.i_stitle = o.i_stitle;\n        this.i_body = o.i_body;\n        this.i_bodytype = o.i_bodytype;\n        this.i_bodyoptions = o.i_bodyoptions;\n        this.locations = o.locations;\n        this.i_media = o.i_media;\n        this.i_misc = o.i_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.color_field = o.color_field;\n        this.TextData = o.TextData;\n    }\n}\n\nexport class instanceItem1 {\n\n    id: String;\n    i_icon: String;\n    mascot: String;\n    i_title: String;\n    i_stitle: String;\n    i_body: String;\n    i_bodytype: String;\n    i_bodyoptions: String;\n    locations: String;\n    i_media: String;\n    i_misc: String;\n    created_at: String;\n    updated_at: String;\n    color_field: String;\n    TextData: any;\n\n    constructor(o: {\n        id: String;\n        i_icon: String;\n        mascot: String;\n        i_title: String;\n        i_stitle: String;\n        i_body: String;\n        i_bodytype: String;\n        i_bodyoptions: String;\n        locations: String;\n        i_media: String;\n        i_misc: String;\n        created_at: String;\n        updated_at: String;\n        color_field: String;\n        TextData: any;\n\n    }) {\n        this.id = o.id;\n        this.i_icon = o.i_icon;\n        this.mascot = o.mascot;\n        this.i_title = o.i_title;\n        this.i_stitle = o.i_stitle;\n        this.i_body = o.i_body;\n        this.i_bodytype = o.i_bodytype;\n        this.i_bodyoptions = o.i_bodyoptions;\n        this.locations = o.locations;\n        this.i_media = o.i_media;\n        this.i_misc = o.i_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.color_field = o.color_field;\n        this.TextData = o.TextData;\n    }\n}\n\nexport const instanceStore = new Store<instanceItem[] | false>(false);\n\nexport const instanceStore1 = new Store<instanceItem1[] | false>(false);\n\nexport const instancestore = () => {\n\n    const [instance, setinstance] = useStore(instanceStore);\n\n    const [activeInstanceData, setactiveInstanceData] = useStore(instanceStore1);\n\n    return {\n        instance, setinstance, activeInstanceData, setactiveInstanceData,\n\n        async loadinstance() {\n            await getinstance(\" \").then(\n                (data) => {\n                    setinstance(data.data.results);\n                    console.log(\"Instances Data: \",  data.data.results);\n                }\n            )\n        },\n        async loadinstancewithid(id: any) {\n            await getinstance(id).then(\n                (data) => {\n                    setinstance(data.data.results);\n                }\n            )\n        },\n        async postinstance(data: any) {\n            await postinstance(data).then((res) => {\n                console.log(res);\n                setinstance((oldArray: any) => [...oldArray, res.data]);\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        async editinstance(id: any, data: any) {\n            await editinstance(id, data).then((res) => {\n                console.log(res);\n                setinstance((oldarr) => {\n                    return (oldarr) && oldarr.map((obj: any) => {\n                        const getobj = (o: any) => {\n                            let x = o;\n                            x.i_icon = data.i_icon\n                            x.mascot = data.mascot\n                            x.i_title = data.i_title\n                            x.i_stitle = data.i_stitle\n                            x.i_body = data.i_body\n                            x.i_bodytype = data.i_bodytype\n                            x.i_bodyoptions = data.i_bodyoptions\n                            x.locations = data.locations\n                            x.i_media = data.i_media\n                            x.i_misc = data.i_misc\n                            x.color_field = data.color_field\n                            return x;\n                        }\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\n                    })\n                })\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        async deleteinstance(id: any) {\n            await deleteinstance(id).then((res) => {\n                console.log(res);\n                setinstance(instance && instance.filter(ele => ele.id !== id))\n            }).catch((res) => {\n                console.log(res);\n            })\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\n\nexport const ActivePopup1 = new Store<string>(\"\");\n\nexport const useActivePopup = () => {\n\n    const [ActivePopup, setActivePopup] = useStore(ActivePopup1);\n\n    return {\n        ActivePopup, setActivePopup,\n    }\n\n};","import { Store, useStore } from \"./Store\";\nimport getleveldetailsbyid from \"../utils/api/getleveldetailsbyid\";\nimport getleveldetailsbyqrid from \"../utils/api/getleveldetailsbyqrid\";\n\n\nexport class leveldetailsItem {\n\n    id: String;\n    l_level: String;\n    l_icon: String;\n    l_qrcode: String;\n    l_title: String;\n    l_stitle: String;\n    l_body: String;\n    l_bodytype: String;\n    l_bodyoptions: String;\n    locations: boolean;\n    l_media: String;\n    l_misc: String;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n    SubLevelData: String;\n    GameDataLog: any;\n    progress: Number;\n    TextData: any;\n    completion_image: any;\n\n    constructor(o: {\n        id: String;\n        l_level: String;\n        l_icon: String;\n        l_qrcode: String;\n        l_title: String;\n        l_stitle: String;\n        l_body: String;\n        l_bodytype: String;\n        l_bodyoptions: String;\n        locations: boolean;\n        l_media: String;\n        l_misc: String;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n        SubLevelData: any;\n        GameDataLog: any;\n        progress: Number;\n        TextData: any;\n        completion_image: any;\n\n\n    }) {\n        this.id = o.id;\n        this.l_level = o.l_level;\n        this.l_icon = o.l_icon;\n        this.l_qrcode = o.l_qrcode;\n        this.l_title = o.l_title;\n        this.l_stitle = o.l_stitle;\n        this.l_body = o.l_body;\n        this.l_bodytype = o.l_bodytype;\n        this.l_bodyoptions = o.l_bodyoptions;\n        this.locations = o.locations;\n        this.l_media = o.l_media;\n        this.l_misc = o.l_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n        this.SubLevelData = o.SubLevelData;\n        this.GameDataLog = o.GameDataLog;\n        this.progress = o.progress;\n        this.TextData = o.TextData\n        this.completion_image = o.completion_image\n\n    }\n}\n\nexport const leveldetailsStore = new Store<leveldetailsItem | false>(false);\n\nexport const userActiveLevelDetailsStore = () => {\n    const [ActiveLevelDetails, setActiveLevelDetails] = useStore(leveldetailsStore);\n\n    return {\n        ActiveLevelDetails, setActiveLevelDetails,\n\n        async loadActiveleveldetails(id: any) {\n            await getleveldetailsbyid(id).then(\n                (data) => {\n                    // console.log(\"data of level \", data.data.results[0]);\n                    setActiveLevelDetails(data.data.results[0]);\n                }\n            )\n        },\n        async loadActiveleveldetailsbyqr(id: any) {\n            await getleveldetailsbyqrid(id).then(\n                (data) => {\n                    setActiveLevelDetails(data.data.results[0]);\n                }\n            )\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\nimport getsublevel_data_byid from \"../utils/api/getsublevel_data_byid\";\n\nexport class leveldetailsItem {\n\n    created_at: String;\n    id: String;\n    instance_id: any;\n    level_id: any;\n    sl_body: String;\n    sl_bodyoptions: String;\n    sl_bodytype: String;\n    sl_icon: String;\n    sl_media: String;\n    sl_misc: null\n    sl_stitle: String;\n    sl_title: String;\n    sl_types: String;\n    updated_at: String;\n    TextData: any;\n\n    constructor(o: {\n        created_at: String;\n        id: String;\n        instance_id: any;\n        level_id: any;\n        sl_body: String;\n        sl_bodyoptions: String;\n        sl_bodytype: String;\n        sl_icon: String;\n        sl_media: String;\n        sl_misc: null\n        sl_stitle: String;\n        sl_title: String;\n        sl_types: String;\n        updated_at: String;\n        TextData: any\n    }) {\n        this.id = o.id;\n        this.created_at = o.created_at\n        this.instance_id = o.instance_id\n        this.level_id = o.level_id\n        this.sl_body = o.sl_body\n        this.sl_bodyoptions = o.sl_bodyoptions\n        this.sl_bodytype = o.sl_bodytype\n        this.sl_icon = o.sl_icon\n        this.sl_media = o.sl_media\n        this.sl_misc = o.sl_misc\n        this.sl_stitle = o.sl_stitle\n        this.sl_title = o.sl_title\n        this.sl_types = o.sl_types\n        this.updated_at = o.updated_at\n        this.TextData = o.TextData\n    }\n}\n\nexport const leveldetailsStore = new Store <leveldetailsItem | false> (false);\n\nexport const userActiveSubLevelDetailsStore = () => {\n    const [ActiveSubLevelDetails, setActiveSubLevelDetails] = useStore(leveldetailsStore);\n\n    return {\n        ActiveSubLevelDetails, setActiveSubLevelDetails,\n\n        async loadActiveSubleveldetails(id: any) {\n            await getsublevel_data_byid(id).then(\n                (data) => {\n                    // console.log(\"sublevel\", data.data.results[0]);\n                    setActiveSubLevelDetails(data.data.results[0]);\n                }\n            )\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\nimport getlevel from \"../utils/api/getlevel\";\nimport postlevel from \"../utils/api/postlevel\";\nimport editlevel from \"../utils/api/editlevel\";\nimport deletelevel from \"../utils/api/deletelevel\";\n\nexport class levelItem {\n\n    id: String;\n    l_level: String;\n    l_icon: String;\n    l_qrcode: String;\n    l_title: String;\n    l_stitle: String;\n    l_body: String;\n    l_bodytype: String;\n    l_bodyoptions: String;\n    locations: boolean;\n    l_media: String;\n    l_misc: String;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n    SubLevelData: String;\n    GameDataLog: any;\n    unlock_after: String;\n    completion_image: String;\n    clue_image: String;\n    l_qr_id: String;\n    scan_complete: String;\n    progress: String;\n    is_locked: String;\n    TextData: any;\n\n    constructor(o: {\n        id: String;\n        l_level: String;\n        l_icon: String;\n        l_qrcode: String;\n        l_title: String;\n        l_stitle: String;\n        l_body: String;\n        l_bodytype: String;\n        l_bodyoptions: String;\n        locations: boolean;\n        l_media: String;\n        l_misc: String;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n        SubLevelData: any;\n        GameDataLog: any;\n        unlock_after: String;\n        completion_image: String;\n        clue_image: String;\n        l_qr_id: String;\n        scan_complete: String;\n        progress: String;\n        is_locked: String;\n        TextData: any;\n\n    }) {\n        this.id = o.id;\n        this.l_level = o.l_level;\n        this.l_icon = o.l_icon;\n        this.l_qrcode = o.l_qrcode;\n        this.l_title = o.l_title;\n        this.l_stitle = o.l_stitle;\n        this.l_body = o.l_body;\n        this.l_bodytype = o.l_bodytype;\n        this.l_bodyoptions = o.l_bodyoptions;\n        this.locations = o.locations;\n        this.l_media = o.l_media;\n        this.l_misc = o.l_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n        this.SubLevelData = o.SubLevelData;\n        this.GameDataLog = o.GameDataLog;\n\n        this.unlock_after = o.unlock_after;\n        this.completion_image = o.completion_image;\n        this.clue_image = o.clue_image;\n        this.l_qr_id = o.l_qr_id;\n        this.scan_complete = o.scan_complete;\n        this.progress = o.progress;\n        this.is_locked = o.is_locked;\n        this.TextData=o.TextData\n    }\n}\n\nexport const levelStore = new Store<levelItem[] | false>(false);\n\nexport const levelstore = () => {\n    const [level, setlevel] = useStore(levelStore);\n\n    return {\n        level, setlevel,\n\n        async loadlevel() {\n            await getlevel(\"\").then(\n                (data) => {\n                    setlevel(data.data.results);\n                }\n            )\n        },\n        async loadlevelwithid(id: any) {\n            await getlevel(id).then(\n                (data) => {\n                    setlevel(data.data.results);\n                    console.log(data.data.results);\n\n                }\n            )\n\n        },\n        async postlevel(data: any) {\n            await postlevel(data).then((res) => {\n                console.log(res);\n                setlevel((oldArray: any) => [...oldArray, res.data]);\n\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        async editlevel(id: any, data: any) {\n            await editlevel(id, data).then((res) => {\n                console.log(res);\n                setlevel((oldarr) => {\n                    return (oldarr) && oldarr.map((obj: any) => {\n                        const getobj = (o: any) => {\n                            let x = o;\n                            x.l_level = data.l_level\n                            x.instance_id = data.instance_id\n                            x.l_icon = data.l_icon\n                            x.l_qrcode = data.l_qrcode\n                            x.l_title = data.l_title\n                            x.l_stitle = data.l_stitle\n                            x.l_body = data.l_body\n                            x.l_bodytype = data.l_bodytype\n                            x.l_bodyoptions = data.l_bodyoptions\n                            x.locations = data.locations\n                            x.l_media = data.l_media\n                            x.l_misc = data.l_misc\n                            x.completion_image = data.completion_image\n                            x.clue_image = data.clue_image\n                            x.l_qr_id = data.l_qr_id\n                            x.unlock_after = data.unlock_after\n                            return x;\n                        }\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\n                    })\n                })\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        async deletelevel(id: any) {\n            await deletelevel(id).then((res) => {\n                console.log(res);\n                setlevel(level && level.filter(ele => ele.id !== id))\n            }).catch((res) => {\n                console.log(res);\n            })\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\nimport getlogo from \"../utils/api/getlogo\";\nimport editlogo from \"../utils/api/editlogo\";\nimport postlogo from \"../utils/api/postlogo\";\nimport deletelogo from \"../utils/api/deletelogo\";\nexport class logoItem {\n\n    id: String;\n    i_logo: String;\n    position: String;\n    section: String;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n\n    constructor(o: {\n        id: String;\n        i_logo: String;\n        position: String;\n        section: String;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n    }) {\n        this.id = o.id;\n        this.i_logo = o.i_logo;\n        this.position = o.position;\n        this.section = o.section;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n    }\n}\n\nexport const logoStore = new Store<logoItem[] | false>(false);\n\nexport const logostore = () => {\n    const [logo, setlogo] = useStore(logoStore);\n\n    return {\n        logo, setlogo,\n\n        async loadlogo() {\n            await getlogo(\"\").then(\n                (data) => {\n                    setlogo(data.data.results);\n                }\n            ) \n        },\n        async loadlogowithid(id: any) {\n            await getlogo(id).then(\n                (data) => {\n                      setlogo(data.data.results);\n                }\n            )\n\n        },\n        async postlogo(data: any) {\n            await postlogo(data).then((res) => {\n                   setlogo((oldArray: any) => [...oldArray, res.data]);\n\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        async editlogo(id: any, data: any) {\n            await editlogo(id, data).then((res) => {\n                  setlogo((oldarr) => {\n                    return (oldarr) && oldarr.map((obj: any) => {\n                        const getobj = (o: any) => {\n                            let x = o;\n                            x.instance_id = data.instance_id\n                            x.i_logo = data.i_logo\n                            x.position = data.position\n                            x.section = data.section\n                            return x;\n                        }\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\n                    })\n                })\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        async deletelogo(id: any) {\n            await deletelogo(id).then((res) => {\n                   setlogo(logo && logo.filter(ele => ele.id !== id))\n            }).catch((res) => {\n                console.log(res);\n\n            })\n        }\n    }\n\n}\n ","import { Store, useStore } from \"./Store\";\nimport getlogo_arrayposition from \"../utils/api/getlogo_arrayposition\";\nimport getlogo_arrayposition_iid from \"utils/api/getlogo_arrayposition_iid\";\n\nexport class logopositionItem {\n\n    id: String;\n    i_logo: String;\n    position: String;\n    section: String\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n\n    constructor(o: {\n        id: String;\n        i_logo: String;\n        position: String;\n        section: String\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n    }) {\n        this.id = o.id;\n        this.i_logo = o.i_logo;\n        this.position = o.position;\n        this.section = o.section;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n    }\n}\n\nexport class temp {\n    section1: logopositionItem[][]\n    section2: logopositionItem[][]\n    section3: logopositionItem[][]\n    constructor(o: {\n        section1: logopositionItem[][];\n        section2: logopositionItem[][];\n        section3: logopositionItem[][];\n    }) {\n        this.section1 = o.section1;\n        this.section2 = o.section2;\n        this.section3 = o.section3;\n    }\n}\n\nexport const logopositionStore = new Store<temp | false>(false);\n\nexport const logopositionstore = () => {\n    const [logoposition, setlogoposition] = useStore(logopositionStore);\n\n    return {\n        logoposition, setlogoposition,\n\n        async loadlogo_arrayposition() {\n            await getlogo_arrayposition().then(\n                (data) => {\n                    setlogoposition(data.data.results);\n                }\n            )\n        },\n        async loadlogo_arrayposition_iid(id: any) {\n            await getlogo_arrayposition_iid(id).then(\n                (data) => {\n                    setlogoposition(data.data.results);\n                }\n            )\n        },\n    }\n\n}","import { Store, useStore } from \"./Store\";\nimport getleveldetails from \"../utils/api/getleveldetails\";\nexport class leveldetailsItem {\n\n    id: String;\n    l_level: String;\n    l_icon: String;\n    l_qrcode: String;\n    l_title: String;\n    l_stitle: String;\n    l_body: String;\n    l_bodytype: String;\n    l_bodyoptions: String;\n    locations: boolean;\n    l_media: String;\n    l_misc: String;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n    SubLevelData: String;\n    GameDataLog: any;\n    unlock_after: String;\n    completion_image: String;\n    clue_image: String;\n    l_qr_id: String;\n    scan_complete: String;\n    progress: String;\n    is_locked: String;\n    TextData: any\n\n    constructor(o: {\n        id: String;\n        l_level: String;\n        l_icon: String;\n        l_qrcode: String;\n        l_title: String;\n        l_stitle: String;\n        l_body: String;\n        l_bodytype: String;\n        l_bodyoptions: String;\n        locations: boolean;\n        l_media: String;\n        l_misc: String;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n        SubLevelData: any;\n        GameDataLog: any;\n        unlock_after: String;\n        completion_image: String;\n        clue_image: String;\n        l_qr_id: String;\n        scan_complete: String;\n        progress: String;\n        is_locked: String;\n        TextData: any\n\n    }) {\n        this.id = o.id;\n        this.l_level = o.l_level;\n        this.l_icon = o.l_icon;\n        this.l_qrcode = o.l_qrcode;\n        this.l_title = o.l_title;\n        this.l_stitle = o.l_stitle;\n        this.l_body = o.l_body;\n        this.l_bodytype = o.l_bodytype;\n        this.l_bodyoptions = o.l_bodyoptions;\n        this.locations = o.locations;\n        this.l_media = o.l_media;\n        this.l_misc = o.l_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n        this.SubLevelData = o.SubLevelData;\n        this.GameDataLog = o.GameDataLog;\n\n        this.unlock_after = o.unlock_after;\n        this.completion_image = o.completion_image;\n        this.clue_image = o.clue_image;\n        this.l_qr_id = o.l_qr_id;\n        this.scan_complete = o.scan_complete;\n        this.progress = o.progress;\n        this.is_locked = o.is_locked;\n\n        this.TextData = o.TextData\n\n\n    }\n}\n\nexport const leveldetailsStore = new Store<leveldetailsItem[] | false>(false);\n\nexport const leveldetailslstore = () => {\n    const [leveldetails, setleveldetails] = useStore(leveldetailsStore);\n\n    return {\n        leveldetails, setleveldetails,\n\n        async loadleveldetails() {\n            await getleveldetails().then(\n                (data) => {\n                    console.log(data.data.results);\n\n                    setleveldetails(data.data.results);\n                }\n            )\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\nimport getsublevel from \"../utils/api/getsublevel\";\nimport postsublevel from \"../utils/api/postsublevel\";\nimport editsublevel from \"../utils/api/editsublevel\";\nimport deletesublevel from \"../utils/api/deletesublevel\";\nimport getsublevel_data_byid from \"../utils/api/getsublevel_data_byid\";\nexport class sublevelItem {\n\n    id: String;\n    sl_types: String;\n    sl_icon: String;\n    sl_title: String;\n    sl_stitle: String;\n    sl_body: String;\n    sl_bodytype: String;\n    sl_bodyoptions: String;\n    sl_misc: boolean;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n    level_id: String;\n    sl_media: String;\n    TextData: any;\n\n    constructor(o: {\n        id: String;\n        sl_types: String;\n        sl_icon: String;\n        sl_title: String;\n        sl_stitle: String;\n        sl_body: String;\n        sl_bodytype: String;\n        sl_bodyoptions: String;\n        sl_misc: boolean;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n        level_id: String;\n        sl_media: String;\n        TextData: any;\n\n    }) {\n        this.id = o.id;\n        this.sl_types = o.sl_types;\n        this.sl_icon = o.sl_icon;\n        this.sl_title = o.sl_title;\n        this.sl_stitle = o.sl_stitle;\n        this.sl_body = o.sl_body;\n        this.sl_bodytype = o.sl_bodytype;\n        this.sl_bodyoptions = o.sl_bodyoptions;\n        this.sl_misc = o.sl_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n        this.level_id = o.level_id;\n        this.sl_media = o.sl_media;\n        this.TextData = o.TextData;\n    }\n}\n\nexport const sublevelStore = new Store<sublevelItem[] | false>(false);\n\nexport const sublevel1Store = new Store<sublevelItem | false>(false);\n\n\nexport const sublevelstore = () => {\n    const [sublevel, setsublevel] = useStore(sublevelStore);\n    const [sublevel1, setsublevel1] = useStore(sublevel1Store);\n\n    return {\n        sublevel, setsublevel,\n        sublevel1, setsublevel1,\n        async loadsublevel() {\n            await getsublevel(\"\", \"\").then(\n                (data) => {\n                    setsublevel(data.data.results);\n                }\n            )\n        },\n        async loadsublevelwithid(instanceid: any, levelid: any) {\n            await getsublevel(instanceid, levelid).then(\n                (data) => {\n                    setsublevel(data.data.results);\n                }\n            )\n        },\n        async postsublevel(data: any) {\n            await postsublevel(data).then((res) => {\n                console.log(res);\n                setsublevel((oldArray: any) => [...oldArray, res.data]);\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        async editsublevel(id: any, data: any) {\n            await editsublevel(id, data).then((res) => {\n                console.log(res);\n                setsublevel((oldarr) => {\n                    return (oldarr) && oldarr.map((obj: any) => {\n                        const getobj = (o: any) => {\n                            let x = o;\n                            x.instance_id = data.instance_id\n                            x.level_id = data.level_id\n                            x.sl_types = data.sl_types\n                            x.sl_icon = data.sl_icon\n                            x.sl_title = data.sl_title\n                            x.sl_stitle = data.sl_stitle\n                            x.sl_body = data.sl_body\n                            x.sl_bodytype = data.sl_bodytype\n                            x.sl_bodyoptions = data.sl_bodyoptions\n                            x.sl_misc = data.sl_misc\n                            x.sl_media = data.sl_media\n                            return x;\n                        }\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\n                    })\n                })\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        async deletesublevel(id: any) {\n            await deletesublevel(id).then((res) => {\n                console.log(res);\n                setsublevel(sublevel && sublevel.filter(ele => ele.id !== id))\n            }).catch((res) => {\n                console.log(res);\n            })\n        },\n        async loadsublevel1_data_byid(id: any) {\n            await getsublevel_data_byid(id).then(\n                (data) => {\n                    console.log(\"getsublevel_data_byid\", data);\n                    setsublevel1(data.data.results);\n                }\n            )\n        },\n    }\n}"],"sourceRoot":""}