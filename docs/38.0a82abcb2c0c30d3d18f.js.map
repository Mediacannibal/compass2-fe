{"version":3,"sources":["webpack:///./node_modules/sdp/sdp.js"],"names":["SDPUtils","Math","random","toString","substr","localCName","generateIdentifier","splitLines","blob","trim","split","map","line","splitSections","part","index","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","indexOf","parseCandidate","parts","candidate","foundation","substring","component","parseInt","protocol","toLowerCase","priority","ip","address","port","type","i","length","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","sdp","push","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","payloadType","name","clockRate","channels","numChannels","writeRtpMap","codec","pt","undefined","preferredPayloadType","parseExtmap","id","direction","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","j","writeFmtp","parameters","Object","keys","params","forEach","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","value","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","slice","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","secondarySsrc","encodingParameters","hasRed","hasUlpfec","primarySsrc","flows","apt","encParam","codecPayloadType","rtx","JSON","parse","stringify","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","parseMsid","spec","stream","track","planB","msidParts","parseSctpDescription","maxMessageSize","parseMLine","maxSizeLine","isNaN","sctpPort","fmt","writeSctpDescription","media","sctp","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","version","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","msid","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","username","sessionId","sessionVersion","netType","addressType","isValidSDP","charAt","module","exports"],"mappings":"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","file":"38.0a82abcb2c0c30d3d18f.js","sourcesContent":["/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n"],"sourceRoot":""}