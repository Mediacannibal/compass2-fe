{"version":3,"sources":["webpack:///./src/store/ActiveInstance.ts","webpack:///./src/store/GamedatalogStore.ts","webpack:///./src/store/LanguageStore.ts","webpack:///./src/store/ActiveLevelDetailsStore.ts","webpack:///./src/store/ActiveSubLevelDetailsStore.ts","webpack:///./src/store/InstanceStore.ts","webpack:///./src/store/ActivePopup.ts","webpack:///./src/store/levelStore.ts","webpack:///./src/store/logoStore.ts","webpack:///./src/store/logopositionStore.ts","webpack:///./src/store/leveldetailsStore.ts","webpack:///./src/store/sublevelStore.ts"],"names":["ActiveInstance1","Store","useActiveInstance","useStore","ActiveInstance","setActiveInstance","GamedatalogStore","Gamedatastore","Gamedatalog","setGamedatalog","loadGamedatalog","getGamedatalog","then","data","console","log","loadGamedatalogfilter","level","user","LanguageStore","key","value","useLanguageStore","Language","setLanguage","leveldetailsStore","userActiveLevelDetailsStore","ActiveLevelDetails","setActiveLevelDetails","loadActiveleveldetails","id","getleveldetailsbyid","results","loadActiveleveldetailsbyqr","getleveldetailsbyqrid","userActiveSubLevelDetailsStore","ActiveSubLevelDetails","setActiveSubLevelDetails","loadActiveSubleveldetails","getsublevel_data_byid","instanceStore","instanceStore1","localStorage","getItem","JSON","parse","String","instancestore","instance","setinstance","activeInstanceData","setactiveInstanceData","loadinstance","getinstance","loadinstancewithcallback","callback","loadactiveInstancebyID","postinstance","res","oldArray","err","editinstance","oldarr","map","obj","x","i_icon","mascot","i_title","i_stitle","i_body","i_bodytype","i_bodyoptions","locations","i_media","i_misc","color_field","deleteinstance","filter","ele","ActivePopup1","useActivePopup","ActivePopup","setActivePopup","levelStore","levelstore","setlevel","loadlevel","getlevel","loadlevelwithid","postlevel","editlevel","l_level","instance_id","l_icon","l_qrcode","l_title","l_stitle","l_body","l_bodytype","l_bodyoptions","l_media","l_misc","completion_image","clue_image","l_qr_id","unlock_after","deletelevel","logoStore","logostore","logo","setlogo","loadlogo","getlogo","loadlogowithcallback","loadlogowithid","postlogo","editlogo","i_logo","position","section","deletelogo","logopositionStore","logopositionstore","logoposition","setlogoposition","loadlogo_arrayposition","getlogo_arrayposition","loadlogo_arrayposition_iid","getlogo_arrayposition_iid","leveldetailslstore","leveldetails","setleveldetails","loadleveldetails","getleveldetails","sublevelStore","sublevel1Store","sublevelstore","sublevel","setsublevel","sublevel1","setsublevel1","loadsublevel","getsublevel","loadsublevelwithid","instanceid","levelid","postsublevel","editsublevel","level_id","sl_types","sl_icon","sl_title","sl_stitle","sl_body","sl_bodytype","sl_bodyoptions","sl_misc","sl_media","deletesublevel","loadsublevel1_data_byid"],"mappings":"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","file":"27.779db3d0186f5242c5f5.js","sourcesContent":["import { Store, useStore } from \"./Store\";\r\n\r\n// export const authStore = new Store<null | string>(typeof localStorage === \"undefined\" ? null : localStorage['jwt']);\r\n\r\nexport const ActiveInstance1 = new Store<Number>(-1);\r\n\r\nexport const useActiveInstance = () => {\r\n\r\n    const [ActiveInstance, setActiveInstance] = useStore(ActiveInstance1);\r\n\r\n    return {\r\n        ActiveInstance, setActiveInstance,\r\n    }\r\n};","import { Store, useStore } from \"./Store\";\r\nimport getGamedatalog from \"../utils/api/getGamedatalog\";\r\n\r\nexport class GamedatalogItem {\r\n\r\n    id: String;\r\n    level_sublevel_id: String;\r\n    level_sublevel: String;\r\n    data: String;\r\n    misc: String;\r\n    status: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    user: any;\r\n    instance: any;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        level_sublevel_id: String;\r\n        level_sublevel: String;\r\n        data: String;\r\n        misc: String;\r\n        status: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        user: any;\r\n        instance: any\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.level_sublevel_id = o.level_sublevel_id;\r\n        this.level_sublevel = o.level_sublevel;\r\n        this.data = o.data;\r\n        this.misc = o.misc;\r\n        this.status = o.status;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.user = o.user;\r\n        this.instance = o.instance;\r\n    }\r\n}\r\n\r\nexport const GamedatalogStore = new Store<GamedatalogItem[] | false>(false);\r\n\r\nexport const Gamedatastore = () => {\r\n    const [Gamedatalog, setGamedatalog] = useStore(GamedatalogStore);\r\n\r\n    return {\r\n        Gamedatalog, setGamedatalog,\r\n\r\n        async loadGamedatalog() {\r\n            await getGamedatalog(\"\", \"\").then(\r\n                (data) => {\r\n                    console.log(\">>> data.data.resultsdata.data.results :\", data.data);\r\n                    setGamedatalog(data.data);\r\n                }\r\n            )\r\n        },\r\n        async loadGamedatalogfilter(level: any, user: any) {\r\n            await getGamedatalog(level, user).then(\r\n                (data) => {\r\n                    console.log(\">>> data.data.resultsdata.data.results :\", data.data);\r\n                    setGamedatalog(data.data);\r\n                }\r\n            )\r\n        },\r\n    }\r\n}","import { Store, useStore } from \"./Store\";\r\n\r\n// export const authStore = new Store<null | string>(typeof localStorage === \"undefined\" ? null : localStorage['jwt']);\r\n\r\nexport const LanguageStore = new Store<{ key: string, value: string }>({ key: \"ENGLISH\", value: \"ENGLISH\" });\r\n\r\n\r\nexport const useLanguageStore = () => {\r\n    const [Language, setLanguage] = useStore(LanguageStore);\r\n\r\n    return {\r\n        Language, setLanguage,\r\n\r\n    }\r\n};","import { Store, useStore } from \"./Store\";\r\nimport getleveldetailsbyid from \"../utils/api/getleveldetailsbyid\";\r\nimport getleveldetailsbyqrid from \"../utils/api/getleveldetailsbyqrid\";\r\n\r\n\r\nexport class leveldetailsItem {\r\n\r\n    id: String;\r\n    l_level: String;\r\n    l_icon: String;\r\n    l_qrcode: String;\r\n    l_title: String;\r\n    l_stitle: String;\r\n    l_body: String;\r\n    l_bodytype: String;\r\n    l_bodyoptions: String;\r\n    locations: boolean;\r\n    l_media: String;\r\n    l_misc: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n    SubLevelData: String;\r\n    GameDataLog: any;\r\n    progress: Number;\r\n    TextData: any;\r\n    completion_image: any;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        l_level: String;\r\n        l_icon: String;\r\n        l_qrcode: String;\r\n        l_title: String;\r\n        l_stitle: String;\r\n        l_body: String;\r\n        l_bodytype: String;\r\n        l_bodyoptions: String;\r\n        locations: boolean;\r\n        l_media: String;\r\n        l_misc: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n        SubLevelData: any;\r\n        GameDataLog: any;\r\n        progress: Number;\r\n        TextData: any;\r\n        completion_image: any;\r\n\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.l_level = o.l_level;\r\n        this.l_icon = o.l_icon;\r\n        this.l_qrcode = o.l_qrcode;\r\n        this.l_title = o.l_title;\r\n        this.l_stitle = o.l_stitle;\r\n        this.l_body = o.l_body;\r\n        this.l_bodytype = o.l_bodytype;\r\n        this.l_bodyoptions = o.l_bodyoptions;\r\n        this.locations = o.locations;\r\n        this.l_media = o.l_media;\r\n        this.l_misc = o.l_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n        this.SubLevelData = o.SubLevelData;\r\n        this.GameDataLog = o.GameDataLog;\r\n        this.progress = o.progress;\r\n        this.TextData = o.TextData\r\n        this.completion_image = o.completion_image\r\n\r\n    }\r\n}\r\n\r\nexport const leveldetailsStore = new Store<leveldetailsItem | false>(false);\r\n\r\nexport const userActiveLevelDetailsStore = () => {\r\n    const [ActiveLevelDetails, setActiveLevelDetails] = useStore(leveldetailsStore);\r\n\r\n    return {\r\n        ActiveLevelDetails, setActiveLevelDetails,\r\n\r\n        async loadActiveleveldetails(id: any) {\r\n            await getleveldetailsbyid(id).then(\r\n                (data) => {\r\n                    // console.log(\"data of level \", data.data.results[0]);\r\n                    setActiveLevelDetails(data.data.results[0]);\r\n                }\r\n            )\r\n        },\r\n        async loadActiveleveldetailsbyqr(id: any) {\r\n            await getleveldetailsbyqrid(id).then(\r\n                (data) => {\r\n                    setActiveLevelDetails(data.data.results[0]);\r\n                }\r\n            )\r\n        }\r\n    }\r\n}","import { Store, useStore } from \"./Store\";\r\nimport getsublevel_data_byid from \"../utils/api/getsublevel_data_byid\";\r\n\r\nexport class leveldetailsItem {\r\n\r\n    created_at: String;\r\n    id: String;\r\n    instance_id: any;\r\n    level_id: any;\r\n    sl_body: String;\r\n    sl_bodyoptions: String;\r\n    sl_bodytype: String;\r\n    sl_icon: String;\r\n    sl_media: String;\r\n    sl_misc: null\r\n    sl_stitle: String;\r\n    sl_title: String;\r\n    sl_types: String;\r\n    updated_at: String;\r\n    TextData: any;\r\n\r\n    constructor(o: {\r\n        created_at: String;\r\n        id: String;\r\n        instance_id: any;\r\n        level_id: any;\r\n        sl_body: String;\r\n        sl_bodyoptions: String;\r\n        sl_bodytype: String;\r\n        sl_icon: String;\r\n        sl_media: String;\r\n        sl_misc: null\r\n        sl_stitle: String;\r\n        sl_title: String;\r\n        sl_types: String;\r\n        updated_at: String;\r\n        TextData: any\r\n    }) {\r\n        this.id = o.id;\r\n        this.created_at = o.created_at\r\n        this.instance_id = o.instance_id\r\n        this.level_id = o.level_id\r\n        this.sl_body = o.sl_body\r\n        this.sl_bodyoptions = o.sl_bodyoptions\r\n        this.sl_bodytype = o.sl_bodytype\r\n        this.sl_icon = o.sl_icon\r\n        this.sl_media = o.sl_media\r\n        this.sl_misc = o.sl_misc\r\n        this.sl_stitle = o.sl_stitle\r\n        this.sl_title = o.sl_title\r\n        this.sl_types = o.sl_types\r\n        this.updated_at = o.updated_at\r\n        this.TextData = o.TextData\r\n    }\r\n}\r\n\r\nexport const leveldetailsStore = new Store <leveldetailsItem | false> (false);\r\n\r\nexport const userActiveSubLevelDetailsStore = () => {\r\n    const [ActiveSubLevelDetails, setActiveSubLevelDetails] = useStore(leveldetailsStore);\r\n\r\n    return {\r\n        ActiveSubLevelDetails, setActiveSubLevelDetails,\r\n\r\n        async loadActiveSubleveldetails(id: any) {\r\n            await getsublevel_data_byid(id).then(\r\n                (data) => {\r\n                    // console.log(\"sublevel\", data.data.results[0]);\r\n                    setActiveSubLevelDetails(data.data.results[0]);\r\n                }\r\n            )\r\n        }\r\n    }\r\n}","import { Store, useStore } from \"./Store\";\r\nimport getinstance from \"../utils/api/getinstance\";\r\nimport editinstance from \"../utils/api/editinstance\";\r\nimport postinstance from \"../utils/api/postinstance\";\r\nimport deleteinstance from \"../utils/api/deleteinstance\";\r\nexport class instanceItem {\r\n\r\n    id: String;\r\n    i_icon: String;\r\n    mascot: String;\r\n    i_title: String;\r\n    i_stitle: String;\r\n    i_body: String;\r\n    i_bodytype: String;\r\n    i_bodyoptions: String;\r\n    locations: String;\r\n    i_media: String;\r\n    i_misc: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    color_field: String;\r\n    TextData: any;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        i_icon: String;\r\n        mascot: String;\r\n        i_title: String;\r\n        i_stitle: String;\r\n        i_body: String;\r\n        i_bodytype: String;\r\n        i_bodyoptions: String;\r\n        locations: String;\r\n        i_media: String;\r\n        i_misc: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        color_field: String;\r\n        TextData: any;\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.i_icon = o.i_icon;\r\n        this.mascot = o.mascot;\r\n        this.i_title = o.i_title;\r\n        this.i_stitle = o.i_stitle;\r\n        this.i_body = o.i_body;\r\n        this.i_bodytype = o.i_bodytype;\r\n        this.i_bodyoptions = o.i_bodyoptions;\r\n        this.locations = o.locations;\r\n        this.i_media = o.i_media;\r\n        this.i_misc = o.i_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.color_field = o.color_field;\r\n        this.TextData = o.TextData;\r\n    }\r\n}\r\n\r\nexport class instanceItem1 {\r\n\r\n    id: String;\r\n    i_icon: String;\r\n    mascot: String;\r\n    i_title: String;\r\n    i_stitle: String;\r\n    i_body: String;\r\n    i_bodytype: String;\r\n    i_bodyoptions: String;\r\n    locations: String;\r\n    i_media: String;\r\n    i_misc: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    color_field: String;\r\n    TextData: any;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        i_icon: String;\r\n        mascot: String;\r\n        i_title: String;\r\n        i_stitle: String;\r\n        i_body: String;\r\n        i_bodytype: String;\r\n        i_bodyoptions: String;\r\n        locations: String;\r\n        i_media: String;\r\n        i_misc: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        color_field: String;\r\n        TextData: any;\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.i_icon = o.i_icon;\r\n        this.mascot = o.mascot;\r\n        this.i_title = o.i_title;\r\n        this.i_stitle = o.i_stitle;\r\n        this.i_body = o.i_body;\r\n        this.i_bodytype = o.i_bodytype;\r\n        this.i_bodyoptions = o.i_bodyoptions;\r\n        this.locations = o.locations;\r\n        this.i_media = o.i_media;\r\n        this.i_misc = o.i_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.color_field = o.color_field;\r\n        this.TextData = o.TextData;\r\n    }\r\n}\r\n\r\n\r\n// setactiveInstanceData(JSON.parse(String(localStorage.getItem('ActiveInstance'))))\r\nexport const instanceStore = new Store<instanceItem[] | false>(false);\r\n\r\nexport const instanceStore1 = new Store<instanceItem1 | false>(typeof localStorage === \"undefined\" ? null : localStorage.getItem('ActiveInstance') ? JSON.parse(String(localStorage.getItem('ActiveInstance'))) : false);\r\n\r\nexport const instancestore = () => {\r\n\r\n    const [instance, setinstance] = useStore(instanceStore);\r\n\r\n    const [activeInstanceData, setactiveInstanceData] = useStore(instanceStore1);\r\n\r\n    return {\r\n        instance, setinstance, activeInstanceData, setactiveInstanceData,\r\n\r\n        async loadinstance() {\r\n            await getinstance(\" \").then(\r\n                (data) => {\r\n                    setinstance(data.data.results);\r\n                    console.log(\"Instances Data: \",  data.data.results);\r\n                }\r\n            )\r\n        },\r\n\r\n        async loadinstancewithcallback(callback:any) {\r\n            await getinstance(\" \").then(\r\n                (data) => {\r\n                    console.log(\"Instances Data: \",  data.data.results);\r\n                    callback(data.data.results)\r\n                }\r\n            )\r\n        },\r\n\r\n        async loadactiveInstancebyID(id: any) {\r\n            await getinstance(id).then(\r\n                (data) => {\r\n                    setactiveInstanceData(data.data.results[0]);\r\n                }\r\n            )\r\n        },\r\n\r\n        async postinstance(data: any) {\r\n            await postinstance(data).then((res) => {\r\n                console.log(res);\r\n                setinstance((oldArray: any) => [...oldArray, res.data]);\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n\r\n        async editinstance(id: any, data: any) {\r\n            await editinstance(id, data).then((res) => {\r\n                console.log(res);\r\n                setinstance((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.i_icon = data.i_icon\r\n                            x.mascot = data.mascot\r\n                            x.i_title = data.i_title\r\n                            x.i_stitle = data.i_stitle\r\n                            x.i_body = data.i_body\r\n                            x.i_bodytype = data.i_bodytype\r\n                            x.i_bodyoptions = data.i_bodyoptions\r\n                            x.locations = data.locations\r\n                            x.i_media = data.i_media\r\n                            x.i_misc = data.i_misc\r\n                            x.color_field = data.color_field\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        \r\n        async deleteinstance(id: any) {\r\n            await deleteinstance(id).then((res) => {\r\n                console.log(res);\r\n                setinstance(instance && instance.filter(ele => ele.id !== id))\r\n            }).catch((res) => {\r\n                console.log(res);\r\n            })\r\n        }\r\n    }\r\n}","import { Store, useStore } from \"./Store\";\r\n\r\nexport const ActivePopup1 = new Store<string>(\"\");\r\n\r\nexport const useActivePopup = () => {\r\n\r\n    const [ActivePopup, setActivePopup] = useStore(ActivePopup1);\r\n\r\n    return {\r\n        ActivePopup, setActivePopup,\r\n    }\r\n\r\n};","import { Store, useStore } from \"./Store\";\r\nimport getlevel from \"../utils/api/getlevel\";\r\nimport postlevel from \"../utils/api/postlevel\";\r\nimport editlevel from \"../utils/api/editlevel\";\r\nimport deletelevel from \"../utils/api/deletelevel\";\r\n\r\nexport class levelItem {\r\n\r\n    id: String;\r\n    l_level: String;\r\n    l_icon: String;\r\n    l_qrcode: String;\r\n    l_title: String;\r\n    l_stitle: String;\r\n    l_body: String;\r\n    l_bodytype: String;\r\n    l_bodyoptions: String;\r\n    locations: boolean;\r\n    l_media: String;\r\n    l_misc: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n    SubLevelData: String;\r\n    GameDataLog: any;\r\n    unlock_after: String;\r\n    completion_image: String;\r\n    clue_image: String;\r\n    l_qr_id: String;\r\n    scan_complete: String;\r\n    progress: String;\r\n    is_locked: String;\r\n    TextData: any;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        l_level: String;\r\n        l_icon: String;\r\n        l_qrcode: String;\r\n        l_title: String;\r\n        l_stitle: String;\r\n        l_body: String;\r\n        l_bodytype: String;\r\n        l_bodyoptions: String;\r\n        locations: boolean;\r\n        l_media: String;\r\n        l_misc: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n        SubLevelData: any;\r\n        GameDataLog: any;\r\n        unlock_after: String;\r\n        completion_image: String;\r\n        clue_image: String;\r\n        l_qr_id: String;\r\n        scan_complete: String;\r\n        progress: String;\r\n        is_locked: String;\r\n        TextData: any;\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.l_level = o.l_level;\r\n        this.l_icon = o.l_icon;\r\n        this.l_qrcode = o.l_qrcode;\r\n        this.l_title = o.l_title;\r\n        this.l_stitle = o.l_stitle;\r\n        this.l_body = o.l_body;\r\n        this.l_bodytype = o.l_bodytype;\r\n        this.l_bodyoptions = o.l_bodyoptions;\r\n        this.locations = o.locations;\r\n        this.l_media = o.l_media;\r\n        this.l_misc = o.l_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n        this.SubLevelData = o.SubLevelData;\r\n        this.GameDataLog = o.GameDataLog;\r\n\r\n        this.unlock_after = o.unlock_after;\r\n        this.completion_image = o.completion_image;\r\n        this.clue_image = o.clue_image;\r\n        this.l_qr_id = o.l_qr_id;\r\n        this.scan_complete = o.scan_complete;\r\n        this.progress = o.progress;\r\n        this.is_locked = o.is_locked;\r\n        this.TextData=o.TextData\r\n    }\r\n}\r\n\r\nexport const levelStore = new Store<levelItem[] | false>(false);\r\n\r\nexport const levelstore = () => {\r\n    const [level, setlevel] = useStore(levelStore);\r\n\r\n    return {\r\n        level, setlevel,\r\n\r\n        async loadlevel() {\r\n            await getlevel(\"\").then(\r\n                (data) => {\r\n                    setlevel(data.data.results);\r\n                }\r\n            )\r\n        },\r\n\r\n        async loadlevelwithid(id: any) {\r\n            await getlevel(id).then(\r\n                (data) => {\r\n                    setlevel(data.data.results);\r\n                    console.log(data.data.results);\r\n                }\r\n            )\r\n        },\r\n\r\n        async postlevel(data: any) {\r\n            await postlevel(data).then((res) => {\r\n                console.log(res);\r\n                setlevel((oldArray: any) => [...oldArray, res.data]);\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n\r\n        async editlevel(id: any, data: any) {\r\n            await editlevel(id, data).then((res) => {\r\n                console.log(res);\r\n                setlevel((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.l_level = data.l_level\r\n                            x.instance_id = data.instance_id\r\n                            x.l_icon = data.l_icon\r\n                            x.l_qrcode = data.l_qrcode\r\n                            x.l_title = data.l_title\r\n                            x.l_stitle = data.l_stitle\r\n                            x.l_body = data.l_body\r\n                            x.l_bodytype = data.l_bodytype\r\n                            x.l_bodyoptions = data.l_bodyoptions\r\n                            x.locations = data.locations\r\n                            x.l_media = data.l_media\r\n                            x.l_misc = data.l_misc\r\n                            x.completion_image = data.completion_image\r\n                            x.clue_image = data.clue_image\r\n                            x.l_qr_id = data.l_qr_id\r\n                            x.unlock_after = data.unlock_after\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        \r\n        async deletelevel(id: any) {\r\n            await deletelevel(id).then((res) => {\r\n                console.log(res);\r\n                setlevel(level && level.filter(ele => ele.id !== id))\r\n            }).catch((res) => {\r\n                console.log(res);\r\n            })\r\n        }\r\n    }\r\n}","import { Store, useStore } from \"./Store\";\r\nimport getlogo from \"../utils/api/getlogo\";\r\nimport editlogo from \"../utils/api/editlogo\";\r\nimport postlogo from \"../utils/api/postlogo\";\r\nimport deletelogo from \"../utils/api/deletelogo\";\r\nexport class logoItem {\r\n\r\n    id: String;\r\n    i_logo: String;\r\n    position: String;\r\n    section: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        i_logo: String;\r\n        position: String;\r\n        section: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n    }) {\r\n        this.id = o.id;\r\n        this.i_logo = o.i_logo;\r\n        this.position = o.position;\r\n        this.section = o.section;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n    }\r\n}\r\n\r\nexport const logoStore = new Store<logoItem[] | false>(false);\r\n\r\nexport const logostore = () => {\r\n    const [logo, setlogo] = useStore(logoStore);\r\n\r\n    return {\r\n        logo, setlogo,\r\n\r\n        async loadlogo() {\r\n            await getlogo(\"\").then(\r\n                (data) => {                    \r\n                    setlogo(data.data.results);\r\n                }\r\n            ) \r\n        },\r\n        async loadlogowithcallback(callback) {\r\n            await getlogo(\"\").then(\r\n                (data) => {                    \r\n                    callback(data.data.results);\r\n                    setlogo(data.data.results);\r\n                }\r\n            ) \r\n        },\r\n        async loadlogowithid(id: any) {\r\n            await getlogo(id).then(\r\n                (data) => {\r\n                      setlogo(data.data.results);\r\n                }\r\n            )\r\n        },\r\n\r\n        async postlogo(data: any) {\r\n            await postlogo(data).then((res) => {\r\n                   setlogo((oldArray: any) => [...oldArray, res.data]);\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n\r\n        async editlogo(id: any, data: any) {\r\n            await editlogo(id, data).then((res) => {\r\n                  setlogo((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.instance_id = data.instance_id\r\n                            x.i_logo = data.i_logo\r\n                            x.position = data.position\r\n                            x.section = data.section\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n\r\n        async deletelogo(id: any) {\r\n            await deletelogo(id).then((res) => {\r\n                   setlogo(logo && logo.filter(ele => ele.id !== id))\r\n            }).catch((res) => {\r\n                console.log(res);\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n ","import { Store, useStore } from \"./Store\";\r\nimport getlogo_arrayposition from \"../utils/api/getlogo_arrayposition\";\r\nimport getlogo_arrayposition_iid from \"utils/api/getlogo_arrayposition_iid\";\r\n\r\nexport class logopositionItem {\r\n\r\n    id: String;\r\n    i_logo: String;\r\n    position: String;\r\n    section: String\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        i_logo: String;\r\n        position: String;\r\n        section: String\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n    }) {\r\n        this.id = o.id;\r\n        this.i_logo = o.i_logo;\r\n        this.position = o.position;\r\n        this.section = o.section;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n    }\r\n}\r\n\r\nexport class temp {\r\n    section1: logopositionItem[][]\r\n    section2: logopositionItem[][]\r\n    section3: logopositionItem[][]\r\n    constructor(o: {\r\n        section1: logopositionItem[][];\r\n        section2: logopositionItem[][];\r\n        section3: logopositionItem[][];\r\n    }) {\r\n        this.section1 = o.section1;\r\n        this.section2 = o.section2;\r\n        this.section3 = o.section3;\r\n    }\r\n}\r\n\r\nexport const logopositionStore = new Store<temp | false>(false);\r\n\r\nexport const logopositionstore = () => {\r\n    const [logoposition, setlogoposition] = useStore(logopositionStore);\r\n\r\n    return {\r\n        logoposition, setlogoposition,\r\n\r\n        async loadlogo_arrayposition() {\r\n            await getlogo_arrayposition().then(\r\n                (data) => {\r\n                    setlogoposition(data.data.results);\r\n                }\r\n            )\r\n        },\r\n        async loadlogo_arrayposition_iid(id: any) {\r\n            await getlogo_arrayposition_iid(id).then(\r\n                (data) => {\r\n                    setlogoposition(data.data.results);\r\n                }\r\n            )\r\n        },\r\n    }\r\n\r\n}","import { Store, useStore } from \"./Store\";\r\nimport getleveldetails from \"../utils/api/getleveldetails\";\r\nexport class leveldetailsItem {\r\n\r\n    id: String;\r\n    l_level: String;\r\n    l_icon: String;\r\n    l_qrcode: String;\r\n    l_title: String;\r\n    l_stitle: String;\r\n    l_body: String;\r\n    l_bodytype: String;\r\n    l_bodyoptions: String;\r\n    locations: boolean;\r\n    l_media: String;\r\n    l_misc: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n    SubLevelData: String;\r\n    GameDataLog: any;\r\n    unlock_after: String;\r\n    completion_image: String;\r\n    clue_image: String;\r\n    l_qr_id: String;\r\n    scan_complete: String;\r\n    progress: String;\r\n    is_locked: String;\r\n    TextData: any\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        l_level: String;\r\n        l_icon: String;\r\n        l_qrcode: String;\r\n        l_title: String;\r\n        l_stitle: String;\r\n        l_body: String;\r\n        l_bodytype: String;\r\n        l_bodyoptions: String;\r\n        locations: boolean;\r\n        l_media: String;\r\n        l_misc: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n        SubLevelData: any;\r\n        GameDataLog: any;\r\n        unlock_after: String;\r\n        completion_image: String;\r\n        clue_image: String;\r\n        l_qr_id: String;\r\n        scan_complete: String;\r\n        progress: String;\r\n        is_locked: String;\r\n        TextData: any\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.l_level = o.l_level;\r\n        this.l_icon = o.l_icon;\r\n        this.l_qrcode = o.l_qrcode;\r\n        this.l_title = o.l_title;\r\n        this.l_stitle = o.l_stitle;\r\n        this.l_body = o.l_body;\r\n        this.l_bodytype = o.l_bodytype;\r\n        this.l_bodyoptions = o.l_bodyoptions;\r\n        this.locations = o.locations;\r\n        this.l_media = o.l_media;\r\n        this.l_misc = o.l_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n        this.SubLevelData = o.SubLevelData;\r\n        this.GameDataLog = o.GameDataLog;\r\n\r\n        this.unlock_after = o.unlock_after;\r\n        this.completion_image = o.completion_image;\r\n        this.clue_image = o.clue_image;\r\n        this.l_qr_id = o.l_qr_id;\r\n        this.scan_complete = o.scan_complete;\r\n        this.progress = o.progress;\r\n        this.is_locked = o.is_locked;\r\n\r\n        this.TextData = o.TextData\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const leveldetailsStore = new Store<leveldetailsItem[] | false>(false);\r\n\r\nexport const leveldetailslstore = () => {\r\n    const [leveldetails, setleveldetails] = useStore(leveldetailsStore);\r\n\r\n    return {\r\n        leveldetails, setleveldetails,\r\n\r\n        async loadleveldetails() {\r\n            await getleveldetails().then(\r\n                (data) => {\r\n                    console.log(data.data.results);\r\n\r\n                    setleveldetails(data.data.results);\r\n                }\r\n            )\r\n        }\r\n    }\r\n}","import { Store, useStore } from \"./Store\";\r\nimport getsublevel from \"../utils/api/getsublevel\";\r\nimport postsublevel from \"../utils/api/postsublevel\";\r\nimport editsublevel from \"../utils/api/editsublevel\";\r\nimport deletesublevel from \"../utils/api/deletesublevel\";\r\nimport getsublevel_data_byid from \"../utils/api/getsublevel_data_byid\";\r\nexport class sublevelItem {\r\n\r\n    id: String;\r\n    sl_types: String;\r\n    sl_icon: String;\r\n    sl_title: String;\r\n    sl_stitle: String;\r\n    sl_body: String;\r\n    sl_bodytype: String;\r\n    sl_bodyoptions: String;\r\n    sl_misc: boolean;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n    level_id: String;\r\n    sl_media: String;\r\n    TextData: any;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        sl_types: String;\r\n        sl_icon: String;\r\n        sl_title: String;\r\n        sl_stitle: String;\r\n        sl_body: String;\r\n        sl_bodytype: String;\r\n        sl_bodyoptions: String;\r\n        sl_misc: boolean;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n        level_id: String;\r\n        sl_media: String;\r\n        TextData: any;\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.sl_types = o.sl_types;\r\n        this.sl_icon = o.sl_icon;\r\n        this.sl_title = o.sl_title;\r\n        this.sl_stitle = o.sl_stitle;\r\n        this.sl_body = o.sl_body;\r\n        this.sl_bodytype = o.sl_bodytype;\r\n        this.sl_bodyoptions = o.sl_bodyoptions;\r\n        this.sl_misc = o.sl_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n        this.level_id = o.level_id;\r\n        this.sl_media = o.sl_media;\r\n        this.TextData = o.TextData;\r\n    }\r\n}\r\n\r\nexport const sublevelStore = new Store<sublevelItem[] | false>(false);\r\n\r\nexport const sublevel1Store = new Store<sublevelItem | false>(false);\r\n\r\n\r\nexport const sublevelstore = () => {\r\n    const [sublevel, setsublevel] = useStore(sublevelStore);\r\n    const [sublevel1, setsublevel1] = useStore(sublevel1Store);\r\n\r\n    return {\r\n        sublevel, setsublevel,\r\n        sublevel1, setsublevel1,\r\n        async loadsublevel() {\r\n            await getsublevel(\"\", \"\").then(\r\n                (data) => {\r\n                    setsublevel(data.data.results);\r\n                }\r\n            )\r\n        },\r\n        async loadsublevelwithid(instanceid: any, levelid: any) {\r\n            await getsublevel(instanceid, levelid).then(\r\n                (data) => {\r\n                    setsublevel(data.data.results);\r\n                }\r\n            )\r\n        },\r\n        async postsublevel(data: any) {\r\n            await postsublevel(data).then((res) => {\r\n                console.log(res);\r\n                setsublevel((oldArray: any) => [...oldArray, res.data]);\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async editsublevel(id: any, data: any) {\r\n            await editsublevel(id, data).then((res) => {\r\n                console.log(res);\r\n                setsublevel((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.instance_id = data.instance_id\r\n                            x.level_id = data.level_id\r\n                            x.sl_types = data.sl_types\r\n                            x.sl_icon = data.sl_icon\r\n                            x.sl_title = data.sl_title\r\n                            x.sl_stitle = data.sl_stitle\r\n                            x.sl_body = data.sl_body\r\n                            x.sl_bodytype = data.sl_bodytype\r\n                            x.sl_bodyoptions = data.sl_bodyoptions\r\n                            x.sl_misc = data.sl_misc\r\n                            x.sl_media = data.sl_media\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async deletesublevel(id: any) {\r\n            await deletesublevel(id).then((res) => {\r\n                console.log(res);\r\n                setsublevel(sublevel && sublevel.filter(ele => ele.id !== id))\r\n            }).catch((res) => {\r\n                console.log(res);\r\n            })\r\n        },\r\n        async loadsublevel1_data_byid(id: any) {\r\n            await getsublevel_data_byid(id).then(\r\n                (data) => {\r\n                    console.log(\"getsublevel_data_byid\", data);\r\n                    setsublevel1(data.data.results);\r\n                }\r\n            )\r\n        },\r\n    }\r\n}"],"sourceRoot":""}