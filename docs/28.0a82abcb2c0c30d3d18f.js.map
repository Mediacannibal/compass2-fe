{"version":3,"sources":["webpack:///./src/store/LanguageStore.ts","webpack:///./src/store/ActiveLevelDetailsStore.ts","webpack:///./src/store/ActiveSubLevelDetailsStore.ts","webpack:///./src/store/InstanceStore.ts","webpack:///./src/store/ActivePopup.ts","webpack:///./src/store/levelStore.ts","webpack:///./src/store/logoStore.ts","webpack:///./src/store/logopositionStore.ts","webpack:///./src/store/leveldetailsStore.ts","webpack:///./src/store/Loading.ts"],"names":["LanguageStore","Store","key","value","useLanguageStore","useStore","Language","setLanguage","leveldetailsStore","userActiveLevelDetailsStore","ActiveLevelDetails","setActiveLevelDetails","loadActiveleveldetails","id","getleveldetailsbyid","then","data","results","loadActiveleveldetailsbyqr","getleveldetailsbyqrid","userActiveSubLevelDetailsStore","ActiveSubLevelDetails","setActiveSubLevelDetails","loadActiveSubleveldetails","getsublevel_data_byid","instanceStore","instanceStore1","localStorage","getItem","JSON","parse","String","instancestore","instance","setinstance","activeInstanceData","setactiveInstanceData","loadinstance","getinstance","console","log","loadinstancewithcallback","callback","loadactiveInstancebyID","postinstance","res","oldArray","err","editinstance","oldarr","map","obj","x","i_icon","mascot","i_title","i_stitle","i_body","i_bodytype","i_bodyoptions","locations","i_media","i_misc","color_field","deleteinstance","filter","ele","ActivePopup1","useActivePopup","ActivePopup","setActivePopup","levelStore","levelstore","level","setlevel","loadlevel","getlevel","loadlevelwithid","postlevel","editlevel","l_level","instance_id","l_icon","l_qrcode","l_title","l_stitle","l_body","l_bodytype","l_bodyoptions","l_media","l_misc","completion_image","clue_image","l_qr_id","unlock_after","deletelevel","logoStore","logostore","logo","setlogo","loadlogo","getlogo","loadlogowithcallback","loadlogowithid","postlogo","editlogo","i_logo","position","section","deletelogo","logopositionStore","logopositionstore","logoposition","setlogoposition","loadlogo_arrayposition","getlogo_arrayposition","loadlogo_arrayposition_iid","getlogo_arrayposition_iid","leveldetailslstore","leveldetails","setleveldetails","loadleveldetails","getleveldetails","Loading1","useLoading","Loading","setLoading","pushLoading","newid","push","popLoading","remid","isLoading","state"],"mappings":"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","file":"28.0a82abcb2c0c30d3d18f.js","sourcesContent":["import { Store, useStore } from \"./Store\";\n\n// export const authStore = new Store<null | string>(typeof localStorage === \"undefined\" ? null : localStorage['jwt']);\n\nexport const LanguageStore = new Store<{ key: string, value: string }>({ key: \"ENGLISH\", value: \"ENGLISH\" });\n\n\nexport const useLanguageStore = () => {\n    const [Language, setLanguage] = useStore(LanguageStore);\n\n    return {\n        Language, setLanguage,\n\n    }\n};","import { Store, useStore } from \"./Store\";\nimport getleveldetailsbyid from \"../utils/api/getleveldetailsbyid\";\nimport getleveldetailsbyqrid from \"../utils/api/getleveldetailsbyqrid\";\n\n\nexport class leveldetailsItem {\n\n    id: String;\n    l_level: String;\n    l_icon: String;\n    l_qrcode: String;\n    l_title: String;\n    l_stitle: String;\n    l_body: String;\n    l_bodytype: String;\n    l_bodyoptions: String;\n    locations: boolean;\n    l_media: String;\n    l_misc: String;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n    SubLevelData: String;\n    GameDataLog: any;\n    progress: Number;\n    TextData: any;\n    completion_image: any;\n\n    constructor(o: {\n        id: String;\n        l_level: String;\n        l_icon: String;\n        l_qrcode: String;\n        l_title: String;\n        l_stitle: String;\n        l_body: String;\n        l_bodytype: String;\n        l_bodyoptions: String;\n        locations: boolean;\n        l_media: String;\n        l_misc: String;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n        SubLevelData: any;\n        GameDataLog: any;\n        progress: Number;\n        TextData: any;\n        completion_image: any;\n\n\n    }) {\n        this.id = o.id;\n        this.l_level = o.l_level;\n        this.l_icon = o.l_icon;\n        this.l_qrcode = o.l_qrcode;\n        this.l_title = o.l_title;\n        this.l_stitle = o.l_stitle;\n        this.l_body = o.l_body;\n        this.l_bodytype = o.l_bodytype;\n        this.l_bodyoptions = o.l_bodyoptions;\n        this.locations = o.locations;\n        this.l_media = o.l_media;\n        this.l_misc = o.l_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n        this.SubLevelData = o.SubLevelData;\n        this.GameDataLog = o.GameDataLog;\n        this.progress = o.progress;\n        this.TextData = o.TextData\n        this.completion_image = o.completion_image\n\n    }\n}\n\nexport const leveldetailsStore = new Store<leveldetailsItem | false>(false);\n\nexport const userActiveLevelDetailsStore = () => {\n    const [ActiveLevelDetails, setActiveLevelDetails] = useStore(leveldetailsStore);\n\n    return {\n        ActiveLevelDetails, setActiveLevelDetails,\n\n        async loadActiveleveldetails(id: any) {\n            await getleveldetailsbyid(id).then(\n                (data) => {\n                    // console.log(\"data of level \", data.data.results[0]);\n                    setActiveLevelDetails(data.data.results[0]);\n                }\n            )\n        },\n        async loadActiveleveldetailsbyqr(id: any) {\n            await getleveldetailsbyqrid(id).then(\n                (data) => {\n                    setActiveLevelDetails(data.data.results[0]);\n                }\n            )\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\nimport getsublevel_data_byid from \"../utils/api/getsublevel_data_byid\";\n\nexport class leveldetailsItem {\n\n    created_at: String;\n    id: String;\n    instance_id: any;\n    level_id: any;\n    sl_body: String;\n    sl_bodyoptions: String;\n    sl_bodytype: String;\n    sl_icon: String;\n    sl_media: String;\n    sl_misc: null\n    sl_stitle: String;\n    sl_title: String;\n    sl_types: String;\n    updated_at: String;\n    TextData: any;\n\n    constructor(o: {\n        created_at: String;\n        id: String;\n        instance_id: any;\n        level_id: any;\n        sl_body: String;\n        sl_bodyoptions: String;\n        sl_bodytype: String;\n        sl_icon: String;\n        sl_media: String;\n        sl_misc: null\n        sl_stitle: String;\n        sl_title: String;\n        sl_types: String;\n        updated_at: String;\n        TextData: any\n    }) {\n        this.id = o.id;\n        this.created_at = o.created_at\n        this.instance_id = o.instance_id\n        this.level_id = o.level_id\n        this.sl_body = o.sl_body\n        this.sl_bodyoptions = o.sl_bodyoptions\n        this.sl_bodytype = o.sl_bodytype\n        this.sl_icon = o.sl_icon\n        this.sl_media = o.sl_media\n        this.sl_misc = o.sl_misc\n        this.sl_stitle = o.sl_stitle\n        this.sl_title = o.sl_title\n        this.sl_types = o.sl_types\n        this.updated_at = o.updated_at\n        this.TextData = o.TextData\n    }\n}\n\nexport const leveldetailsStore = new Store <leveldetailsItem | false> (false);\n\nexport const userActiveSubLevelDetailsStore = () => {\n    const [ActiveSubLevelDetails, setActiveSubLevelDetails] = useStore(leveldetailsStore);\n\n    return {\n        ActiveSubLevelDetails, setActiveSubLevelDetails,\n\n        async loadActiveSubleveldetails(id: any) {\n            await getsublevel_data_byid(id).then(\n                (data) => {\n                    // console.log(\"sublevel\", data.data.results[0]);\n                    setActiveSubLevelDetails(data.data.results[0]);\n                }\n            )\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\nimport getinstance from \"../utils/api/getinstance\";\nimport editinstance from \"../utils/api/editinstance\";\nimport postinstance from \"../utils/api/postinstance\";\nimport deleteinstance from \"../utils/api/deleteinstance\";\nexport class instanceItem {\n\n    id: String;\n    i_icon: String;\n    mascot: String;\n    i_title: String;\n    i_stitle: String;\n    i_body: String;\n    i_bodytype: String;\n    i_bodyoptions: String;\n    locations: String;\n    i_media: String;\n    i_misc: String;\n    created_at: String;\n    updated_at: String;\n    color_field: String;\n    TextData: any;\n\n    constructor(o: {\n        id: String;\n        i_icon: String;\n        mascot: String;\n        i_title: String;\n        i_stitle: String;\n        i_body: String;\n        i_bodytype: String;\n        i_bodyoptions: String;\n        locations: String;\n        i_media: String;\n        i_misc: String;\n        created_at: String;\n        updated_at: String;\n        color_field: String;\n        TextData: any;\n\n    }) {\n        this.id = o.id;\n        this.i_icon = o.i_icon;\n        this.mascot = o.mascot;\n        this.i_title = o.i_title;\n        this.i_stitle = o.i_stitle;\n        this.i_body = o.i_body;\n        this.i_bodytype = o.i_bodytype;\n        this.i_bodyoptions = o.i_bodyoptions;\n        this.locations = o.locations;\n        this.i_media = o.i_media;\n        this.i_misc = o.i_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.color_field = o.color_field;\n        this.TextData = o.TextData;\n    }\n}\n\nexport class instanceItem1 {\n\n    id: String;\n    i_icon: String;\n    mascot: String;\n    i_title: String;\n    i_stitle: String;\n    i_body: String;\n    i_bodytype: String;\n    i_bodyoptions: String;\n    locations: String;\n    i_media: String;\n    i_misc: String;\n    created_at: String;\n    updated_at: String;\n    color_field: String;\n    TextData: any;\n\n    constructor(o: {\n        id: String;\n        i_icon: String;\n        mascot: String;\n        i_title: String;\n        i_stitle: String;\n        i_body: String;\n        i_bodytype: String;\n        i_bodyoptions: String;\n        locations: String;\n        i_media: String;\n        i_misc: String;\n        created_at: String;\n        updated_at: String;\n        color_field: String;\n        TextData: any;\n\n    }) {\n        this.id = o.id;\n        this.i_icon = o.i_icon;\n        this.mascot = o.mascot;\n        this.i_title = o.i_title;\n        this.i_stitle = o.i_stitle;\n        this.i_body = o.i_body;\n        this.i_bodytype = o.i_bodytype;\n        this.i_bodyoptions = o.i_bodyoptions;\n        this.locations = o.locations;\n        this.i_media = o.i_media;\n        this.i_misc = o.i_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.color_field = o.color_field;\n        this.TextData = o.TextData;\n    }\n}\n\n\n// setactiveInstanceData(JSON.parse(String(localStorage.getItem('ActiveInstance'))))\nexport const instanceStore = new Store<instanceItem[] | false>(false);\n\nexport const instanceStore1 = new Store<instanceItem1 | false>(typeof localStorage === \"undefined\" ? null : localStorage.getItem('ActiveInstance') ? JSON.parse(String(localStorage.getItem('ActiveInstance'))) : false);\n\nexport const instancestore = () => {\n\n    const [instance, setinstance] = useStore(instanceStore);\n\n    const [activeInstanceData, setactiveInstanceData] = useStore(instanceStore1);\n\n    return {\n        instance, setinstance, activeInstanceData, setactiveInstanceData,\n\n        async loadinstance() {\n            await getinstance(\" \").then(\n                (data) => {\n                    setinstance(data.data.results);\n                    console.log(\"Instances Data: \",  data.data.results);\n                }\n            )\n        },\n\n        async loadinstancewithcallback(callback:any) {\n            await getinstance(\" \").then(\n                (data) => {\n                    console.log(\"Instances Data: \",  data.data.results);\n                    callback(data.data.results)\n                }\n            )\n        },\n\n        async loadactiveInstancebyID(id: any) {\n            await getinstance(id).then(\n                (data) => {\n                    setactiveInstanceData(data.data.results[0]);\n                }\n            )\n        },\n\n        async postinstance(data: any) {\n            await postinstance(data).then((res) => {\n                console.log(res);\n                setinstance((oldArray: any) => [...oldArray, res.data]);\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n\n        async editinstance(id: any, data: any) {\n            await editinstance(id, data).then((res) => {\n                console.log(res);\n                setinstance((oldarr) => {\n                    return (oldarr) && oldarr.map((obj: any) => {\n                        const getobj = (o: any) => {\n                            let x = o;\n                            x.i_icon = data.i_icon\n                            x.mascot = data.mascot\n                            x.i_title = data.i_title\n                            x.i_stitle = data.i_stitle\n                            x.i_body = data.i_body\n                            x.i_bodytype = data.i_bodytype\n                            x.i_bodyoptions = data.i_bodyoptions\n                            x.locations = data.locations\n                            x.i_media = data.i_media\n                            x.i_misc = data.i_misc\n                            x.color_field = data.color_field\n                            return x;\n                        }\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\n                    })\n                })\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        \n        async deleteinstance(id: any) {\n            await deleteinstance(id).then((res) => {\n                console.log(res);\n                setinstance(instance && instance.filter(ele => ele.id !== id))\n            }).catch((res) => {\n                console.log(res);\n            })\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\n\nexport const ActivePopup1 = new Store<string>(\"\");\n\nexport const useActivePopup = () => {\n\n    const [ActivePopup, setActivePopup] = useStore(ActivePopup1);\n\n    return {\n        ActivePopup, setActivePopup,\n    }\n\n};","import { Store, useStore } from \"./Store\";\nimport getlevel from \"../utils/api/getlevel\";\nimport postlevel from \"../utils/api/postlevel\";\nimport editlevel from \"../utils/api/editlevel\";\nimport deletelevel from \"../utils/api/deletelevel\";\n\nexport class levelItem {\n\n    id: String;\n    l_level: String;\n    l_icon: String;\n    l_qrcode: String;\n    l_title: String;\n    l_stitle: String;\n    l_body: String;\n    l_bodytype: String;\n    l_bodyoptions: String;\n    locations: boolean;\n    l_media: String;\n    l_misc: String;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n    SubLevelData: String;\n    GameDataLog: any;\n    unlock_after: String;\n    completion_image: String;\n    clue_image: String;\n    l_qr_id: String;\n    scan_complete: String;\n    progress: String;\n    is_locked: String;\n    TextData: any;\n\n    constructor(o: {\n        id: String;\n        l_level: String;\n        l_icon: String;\n        l_qrcode: String;\n        l_title: String;\n        l_stitle: String;\n        l_body: String;\n        l_bodytype: String;\n        l_bodyoptions: String;\n        locations: boolean;\n        l_media: String;\n        l_misc: String;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n        SubLevelData: any;\n        GameDataLog: any;\n        unlock_after: String;\n        completion_image: String;\n        clue_image: String;\n        l_qr_id: String;\n        scan_complete: String;\n        progress: String;\n        is_locked: String;\n        TextData: any;\n\n    }) {\n        this.id = o.id;\n        this.l_level = o.l_level;\n        this.l_icon = o.l_icon;\n        this.l_qrcode = o.l_qrcode;\n        this.l_title = o.l_title;\n        this.l_stitle = o.l_stitle;\n        this.l_body = o.l_body;\n        this.l_bodytype = o.l_bodytype;\n        this.l_bodyoptions = o.l_bodyoptions;\n        this.locations = o.locations;\n        this.l_media = o.l_media;\n        this.l_misc = o.l_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n        this.SubLevelData = o.SubLevelData;\n        this.GameDataLog = o.GameDataLog;\n\n        this.unlock_after = o.unlock_after;\n        this.completion_image = o.completion_image;\n        this.clue_image = o.clue_image;\n        this.l_qr_id = o.l_qr_id;\n        this.scan_complete = o.scan_complete;\n        this.progress = o.progress;\n        this.is_locked = o.is_locked;\n        this.TextData=o.TextData\n    }\n}\n\nexport const levelStore = new Store<levelItem[] | false>(false);\n\nexport const levelstore = () => {\n    const [level, setlevel] = useStore(levelStore);\n\n    return {\n        level, setlevel,\n\n        async loadlevel() {\n            await getlevel(\"\").then(\n                (data) => {\n                    setlevel(data.data.results);\n                }\n            )\n        },\n\n        async loadlevelwithid(id: any) {\n            await getlevel(id).then(\n                (data) => {\n                    setlevel(data.data.results);\n                    console.log(data.data.results);\n                }\n            )\n        },\n\n        async postlevel(data: any) {\n            await postlevel(data).then((res) => {\n                console.log(res);\n                setlevel((oldArray: any) => [...oldArray, res.data]);\n\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n\n        async editlevel(id: any, data: any) {\n            await editlevel(id, data).then((res) => {\n                console.log(res);\n                setlevel((oldarr) => {\n                    return (oldarr) && oldarr.map((obj: any) => {\n                        const getobj = (o: any) => {\n                            let x = o;\n                            x.l_level = data.l_level\n                            x.instance_id = data.instance_id\n                            x.l_icon = data.l_icon\n                            x.l_qrcode = data.l_qrcode\n                            x.l_title = data.l_title\n                            x.l_stitle = data.l_stitle\n                            x.l_body = data.l_body\n                            x.l_bodytype = data.l_bodytype\n                            x.l_bodyoptions = data.l_bodyoptions\n                            x.locations = data.locations\n                            x.l_media = data.l_media\n                            x.l_misc = data.l_misc\n                            x.completion_image = data.completion_image\n                            x.clue_image = data.clue_image\n                            x.l_qr_id = data.l_qr_id\n                            x.unlock_after = data.unlock_after\n                            return x;\n                        }\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\n                    })\n                })\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n        \n        async deletelevel(id: any) {\n            await deletelevel(id).then((res) => {\n                console.log(res);\n                setlevel(level && level.filter(ele => ele.id !== id))\n            }).catch((res) => {\n                console.log(res);\n            })\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\nimport getlogo from \"../utils/api/getlogo\";\nimport editlogo from \"../utils/api/editlogo\";\nimport postlogo from \"../utils/api/postlogo\";\nimport deletelogo from \"../utils/api/deletelogo\";\nexport class logoItem {\n\n    id: String;\n    i_logo: String;\n    position: String;\n    section: String;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n\n    constructor(o: {\n        id: String;\n        i_logo: String;\n        position: String;\n        section: String;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n    }) {\n        this.id = o.id;\n        this.i_logo = o.i_logo;\n        this.position = o.position;\n        this.section = o.section;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n    }\n}\n\nexport const logoStore = new Store<logoItem[] | false>(false);\n\nexport const logostore = () => {\n    const [logo, setlogo] = useStore(logoStore);\n\n    return {\n        logo, setlogo,\n\n        async loadlogo() {\n            await getlogo(\"\").then(\n                (data) => {                    \n                    setlogo(data.data.results);\n                }\n            ) \n        },\n        async loadlogowithcallback(callback) {\n            await getlogo(\"\").then(\n                (data) => {                    \n                    callback(data.data.results);\n                    setlogo(data.data.results);\n                }\n            ) \n        },\n        async loadlogowithid(id: any) {\n            await getlogo(id).then(\n                (data) => {\n                      setlogo(data.data.results);\n                }\n            )\n        },\n\n        async postlogo(data: any) {\n            await postlogo(data).then((res) => {\n                   setlogo((oldArray: any) => [...oldArray, res.data]);\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n\n        async editlogo(id: any, data: any) {\n            await editlogo(id, data).then((res) => {\n                  setlogo((oldarr) => {\n                    return (oldarr) && oldarr.map((obj: any) => {\n                        const getobj = (o: any) => {\n                            let x = o;\n                            x.instance_id = data.instance_id\n                            x.i_logo = data.i_logo\n                            x.position = data.position\n                            x.section = data.section\n                            return x;\n                        }\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\n                    })\n                })\n            }).catch((err) => {\n                console.log(err);\n            })\n        },\n\n        async deletelogo(id: any) {\n            await deletelogo(id).then((res) => {\n                   setlogo(logo && logo.filter(ele => ele.id !== id))\n            }).catch((res) => {\n                console.log(res);\n\n            })\n        }\n    }\n\n}\n ","import { Store, useStore } from \"./Store\";\nimport getlogo_arrayposition from \"../utils/api/getlogo_arrayposition\";\nimport getlogo_arrayposition_iid from \"utils/api/getlogo_arrayposition_iid\";\n\nexport class logopositionItem {\n\n    id: String;\n    i_logo: String;\n    position: String;\n    section: String\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n\n    constructor(o: {\n        id: String;\n        i_logo: String;\n        position: String;\n        section: String\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n    }) {\n        this.id = o.id;\n        this.i_logo = o.i_logo;\n        this.position = o.position;\n        this.section = o.section;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n    }\n}\n\nexport class temp {\n    section1: logopositionItem[][]\n    section2: logopositionItem[][]\n    section3: logopositionItem[][]\n    constructor(o: {\n        section1: logopositionItem[][];\n        section2: logopositionItem[][];\n        section3: logopositionItem[][];\n    }) {\n        this.section1 = o.section1;\n        this.section2 = o.section2;\n        this.section3 = o.section3;\n    }\n}\n\nexport const logopositionStore = new Store<temp | false>(false);\n\nexport const logopositionstore = () => {\n    const [logoposition, setlogoposition] = useStore(logopositionStore);\n\n    return {\n        logoposition, setlogoposition,\n\n        async loadlogo_arrayposition() {\n            await getlogo_arrayposition().then(\n                (data) => {\n                    setlogoposition(data.data.results);\n                }\n            )\n        },\n        async loadlogo_arrayposition_iid(id: any) {\n            await getlogo_arrayposition_iid(id).then(\n                (data) => {\n                    setlogoposition(data.data.results);\n                }\n            )\n        },\n    }\n\n}","import { Store, useStore } from \"./Store\";\nimport getleveldetails from \"../utils/api/getleveldetails\";\nexport class leveldetailsItem {\n\n    id: String;\n    l_level: String;\n    l_icon: String;\n    l_qrcode: String;\n    l_title: String;\n    l_stitle: String;\n    l_body: String;\n    l_bodytype: String;\n    l_bodyoptions: String;\n    locations: boolean;\n    l_media: String;\n    l_misc: String;\n    created_at: String;\n    updated_at: String;\n    instance_id: String;\n    SubLevelData: String;\n    GameDataLog: any;\n    unlock_after: String;\n    completion_image: String;\n    clue_image: String;\n    l_qr_id: String;\n    scan_complete: String;\n    progress: String;\n    is_locked: String;\n    TextData: any\n\n    constructor(o: {\n        id: String;\n        l_level: String;\n        l_icon: String;\n        l_qrcode: String;\n        l_title: String;\n        l_stitle: String;\n        l_body: String;\n        l_bodytype: String;\n        l_bodyoptions: String;\n        locations: boolean;\n        l_media: String;\n        l_misc: String;\n        created_at: String;\n        updated_at: String;\n        instance_id: String;\n        SubLevelData: any;\n        GameDataLog: any;\n        unlock_after: String;\n        completion_image: String;\n        clue_image: String;\n        l_qr_id: String;\n        scan_complete: String;\n        progress: String;\n        is_locked: String;\n        TextData: any\n\n    }) {\n        this.id = o.id;\n        this.l_level = o.l_level;\n        this.l_icon = o.l_icon;\n        this.l_qrcode = o.l_qrcode;\n        this.l_title = o.l_title;\n        this.l_stitle = o.l_stitle;\n        this.l_body = o.l_body;\n        this.l_bodytype = o.l_bodytype;\n        this.l_bodyoptions = o.l_bodyoptions;\n        this.locations = o.locations;\n        this.l_media = o.l_media;\n        this.l_misc = o.l_misc;\n        this.created_at = o.created_at;\n        this.updated_at = o.updated_at;\n        this.instance_id = o.instance_id;\n        this.SubLevelData = o.SubLevelData;\n        this.GameDataLog = o.GameDataLog;\n\n        this.unlock_after = o.unlock_after;\n        this.completion_image = o.completion_image;\n        this.clue_image = o.clue_image;\n        this.l_qr_id = o.l_qr_id;\n        this.scan_complete = o.scan_complete;\n        this.progress = o.progress;\n        this.is_locked = o.is_locked;\n\n        this.TextData = o.TextData\n\n\n    }\n}\n\nexport const leveldetailsStore = new Store<leveldetailsItem[] | false>(false);\n\nexport const leveldetailslstore = () => {\n    const [leveldetails, setleveldetails] = useStore(leveldetailsStore);\n\n    return {\n        leveldetails, setleveldetails,\n\n        async loadleveldetails() {\n            await getleveldetails().then(\n                (data) => {\n                    console.log(data.data.results);\n\n                    setleveldetails(data.data.results);\n                }\n            )\n        }\n    }\n}","import { Store, useStore } from \"./Store\";\n\nexport const Loading1 = new Store<String[]>([]);\n\nexport const useLoading = () => {\n\n    const [Loading, setLoading] = useStore(Loading1);\n\n    return {\n        Loading, setLoading,\n        pushLoading(newid: any) {\n            setLoading((oldarr: any) => {\n                oldarr.push(newid)\n                return oldarr\n            })\n        },\n        popLoading(remid: any) {\n            setLoading((oldarr: any) => {\n                let newarr = oldarr.filter((obj: any) => String(obj) !== String(remid))\n                return newarr\n            })\n        },\n        isLoading(id: any) {\n            let state = false\n            Loading.map((obj: any) => {\n                if (String(obj) === String(id)) {\n                    state = true\n                }\n            })\n            return state\n        }\n    }\n};\n\n"],"sourceRoot":""}