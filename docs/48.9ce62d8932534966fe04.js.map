{"version":3,"sources":["webpack:///./src/store/sublevelStore.ts","webpack:///./src/store/Store.ts","webpack:///./src/store/authStore.ts","webpack:///./src/store/levelStore.ts","webpack:///./src/store/userStore.ts","webpack:///./src/store/logoStore.ts","webpack:///./src/store/logopositionStore.ts","webpack:///./src/store/leveldetailsStore.ts"],"names":["sublevelStore","Store","sublevel1Store","sublevelstore","useStore","sublevel","setsublevel","sublevel1","setsublevel1","loadsublevel","getsublevel","then","data","results","loadsublevelwithid","instanceid","levelid","postsublevel","res","console","log","oldArray","err","editsublevel","id","oldarr","map","obj","x","String","instance_id","level_id","sl_types","sl_icon","sl_title","sl_stitle","sl_body","sl_bodytype","sl_bodyoptions","sl_misc","sl_media","deletesublevel","filter","ele","loadsublevel1_data_byid","getsublevel_data_byid","initialValue","this","_state","index","subscribers","oldVal","newVal","newValue","Function","pingSubscribers","callback","currentIndex","store","useState","state","value","setValue","useLayoutEffect","subscribe","update","authStore","localStorage","getItem","JSON","parse","useAuth","auth","setAuth","login","AuthToken","logout","clear","sessionStorage","levelStore","levelstore","level","setlevel","loadlevel","getlevel","loadlevelwithid","postlevel","editlevel","l_level","l_icon","l_qrcode","l_title","l_stitle","l_body","l_bodytype","l_bodyoptions","locations","l_media","l_misc","completion_image","clue_image","l_qr_id","deletelevel","userStore","userDetail","userstore","user","setuser","selfuser","setselfuser","loaduser","getuser","edituser","image","firstname","lastname","email","address","dob","user_type","gender","auth_type","photo_url","dial_code","phone","logoStore","logostore","logo","setlogo","loadlogo","getlogo","loadlogowithid","postlogo","editlogo","i_logo","position","section","deletelogo","logopositionStore","logopositionstore","logoposition","setlogoposition","loadlogo_arrayposition","getlogo_arrayposition","loadlogo_arrayposition_iid","getlogo_arrayposition_iid","leveldetailsStore","leveldetailslstore","leveldetails","setleveldetails","loadleveldetails","getleveldetails"],"mappings":"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","file":"48.9ce62d8932534966fe04.js","sourcesContent":["import { Store, useStore } from \"./Store\";\r\nimport getsublevel from \"../utils/api/getsublevel\";\r\nimport postsublevel from \"../utils/api/postsublevel\";\r\nimport editsublevel from \"../utils/api/editsublevel\";\r\nimport deletesublevel from \"../utils/api/deletesublevel\";\r\nimport getsublevel_data_byid from \"../utils/api/getsublevel_data_byid\";\r\nexport class sublevelItem {\r\n\r\n    id: String;\r\n    sl_types: String;\r\n    sl_icon: String;\r\n    sl_title: String;\r\n    sl_stitle: String;\r\n    sl_body: String;\r\n    sl_bodytype: String;\r\n    sl_bodyoptions: String;\r\n    sl_misc: boolean;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n    level_id: String;\r\n    sl_media: String;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        sl_types: String;\r\n        sl_icon: String;\r\n        sl_title: String;\r\n        sl_stitle: String;\r\n        sl_body: String;\r\n        sl_bodytype: String;\r\n        sl_bodyoptions: String;\r\n        sl_misc: boolean;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n        level_id: String;\r\n        sl_media: String\r\n    }) {\r\n        this.id = o.id;\r\n        this.sl_types = o.sl_types;\r\n        this.sl_icon = o.sl_icon;\r\n        this.sl_title = o.sl_title;\r\n        this.sl_stitle = o.sl_stitle;\r\n        this.sl_body = o.sl_body;\r\n        this.sl_bodytype = o.sl_bodytype;\r\n        this.sl_bodyoptions = o.sl_bodyoptions;\r\n        this.sl_misc = o.sl_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n        this.level_id = o.level_id;\r\n        this.sl_media = o.sl_media;\r\n    }\r\n}\r\n\r\nexport const sublevelStore = new Store<sublevelItem[] | false>(false);\r\n\r\nexport const sublevel1Store = new Store<sublevelItem | false>(false);\r\n\r\n\r\nexport const sublevelstore = () => {\r\n    const [sublevel, setsublevel] = useStore(sublevelStore);\r\n    const [sublevel1, setsublevel1] = useStore(sublevel1Store);\r\n\r\n    return {\r\n        sublevel, setsublevel,\r\n        sublevel1, setsublevel1,\r\n        async loadsublevel() {\r\n            await getsublevel(\"\", \"\").then(\r\n                (data) => {\r\n                    setsublevel(data.data.results);\r\n                }\r\n            )\r\n        },\r\n        async loadsublevelwithid(instanceid: any, levelid: any) {\r\n            await getsublevel(instanceid, levelid).then(\r\n                (data) => {\r\n                    setsublevel(data.data.results);\r\n                }\r\n            )\r\n        },\r\n        async postsublevel(data: any) {\r\n            await postsublevel(data).then((res) => {\r\n                console.log(res);\r\n                setsublevel((oldArray: any) => [...oldArray, res.data]);\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async editsublevel(id: any, data: any) {\r\n            await editsublevel(id, data).then((res) => {\r\n                console.log(res);\r\n                setsublevel((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.instance_id = data.instance_id\r\n                            x.level_id = data.level_id\r\n                            x.sl_types = data.sl_types\r\n                            x.sl_icon = data.sl_icon\r\n                            x.sl_title = data.sl_title\r\n                            x.sl_stitle = data.sl_stitle\r\n                            x.sl_body = data.sl_body\r\n                            x.sl_bodytype = data.sl_bodytype\r\n                            x.sl_bodyoptions = data.sl_bodyoptions\r\n                            x.sl_misc = data.sl_misc\r\n                            x.sl_media = data.sl_media\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async deletesublevel(id: any) {\r\n            await deletesublevel(id).then((res) => {\r\n                console.log(res);\r\n                setsublevel(sublevel && sublevel.filter(ele => ele.id !== id))\r\n            }).catch((res) => {\r\n                console.log(res);\r\n            })\r\n        },\r\n        async loadsublevel1_data_byid(id: any) {\r\n            await getsublevel_data_byid(id).then(\r\n                (data) => {\r\n                    console.log(\"getsublevel_data_byid\", data);\r\n                    setsublevel1(data.data.results);\r\n                }\r\n            )\r\n        },\r\n    }\r\n}","import { useLayoutEffect, useState } from \"react\";\r\n\r\ntype Subscriber<T> = (oldVal: T, newVal: T) => any;\r\n\r\nexport class Store<T> {\r\n    private _state: T;\r\n    private subscribers: { [k: number]: Subscriber<T> };\r\n    private index: number;\r\n    private static id: number = 0;\r\n    id: number;\r\n\r\n    constructor(initialValue: T) {\r\n        this._state = initialValue;\r\n        this.index = 0;\r\n        this.subscribers = {};\r\n        this.id = Store.id++;\r\n    }\r\n\r\n    private pingSubscribers(oldVal: T, newVal: T) {\r\n        for (let id in this.subscribers) {\r\n            this.subscribers[id](oldVal, newVal);\r\n        }\r\n    }\r\n\r\n    update(newValue: ((old: T) => T) | T) {\r\n        let newVal: T;\r\n        if (newValue instanceof Function) {\r\n            newVal = newValue(this._state);\r\n        }\r\n        else {\r\n            newVal = newValue;\r\n        }\r\n        const oldVal = this._state;\r\n\r\n        this._state = newVal;\r\n        this.pingSubscribers(oldVal, newVal);\r\n\r\n        return newVal;\r\n    }\r\n\r\n    /**subscribe to the store. @callback is called with [oldVal, and newVal] @returns a function that unsubscribes */\r\n    subscribe(callback: Subscriber<T>) {\r\n        const currentIndex = ++this.index;\r\n\r\n        this.subscribers[currentIndex] = callback;\r\n\r\n        const subscribers = this.subscribers;\r\n        return function unsubscribe() {\r\n            delete subscribers[currentIndex];\r\n        }\r\n    }\r\n\r\n    get state() {\r\n        return this._state;\r\n    }\r\n}\r\n\r\nexport function useStore<T>(store: Store<T>) {\r\n    const [value, setValue] = useState(store.state);\r\n\r\n    useLayoutEffect(() => {\r\n        const unsubscribe = store.subscribe((oldVal, newVal) => {\r\n            setValue(newVal);\r\n        });\r\n        return unsubscribe\r\n    }, [store.id]);\r\n\r\n\r\n    const newSetValue = (newVal: T | ((old: T) => T)) => {\r\n        store.update(newVal);\r\n    }\r\n    const returnVal : [T, (newVal: T | ((old: T) => T)) => void] = [value,newSetValue];\r\n    return returnVal;\r\n}\r\n\r\nexport function useStores<T>(stores: { [k: string]: Store<T> }):\r\n    [\r\n        { [k: string]: T },\r\n        (\r\n            id: string,\r\n            newVal: T | ((old: T) => T)\r\n        ) => void\r\n    ] {\r\n    const [values, setValues] = useState(() => Object.fromEntries(Object.entries(stores).map(([id, store]) => [id, store.state])));\r\n    const ids = [Object.entries(stores).map(item => item[1].id)];\r\n\r\n    useLayoutEffect(() => {\r\n        // console.log(\"stores has changed\")\r\n        const unsubscribes = Object.entries(stores).map(([id, store]) => store.subscribe((oldVal, newVal) => {\r\n            setValues((oldValues) => ({ ...oldValues, [id]: newVal }));\r\n        }));\r\n\r\n        return () => unsubscribes.forEach(item => item());\r\n    }, [ids.join(\"-\")]);\r\n\r\n\r\n    const setNewValue = (id: string, newVal: T | ((old: T) => T)) => {\r\n        stores[id].update(newVal)\r\n    }\r\n\r\n    const returnVal : [{[k: string]: T}, ((id: string, newVal: T | ((old: T) => T)) => void)] =  [values, setNewValue];\r\n\r\n    return returnVal;\r\n}","import { Store, useStore } from \"./Store\";\r\n\r\n// export const authStore = new Store<null | string>(typeof localStorage === \"undefined\" ? null : localStorage['jwt']);\r\n\r\nexport const authStore = new Store<null | string>(typeof localStorage === \"undefined\" ? null : localStorage.getItem('AuthToken') ? JSON.parse(String(localStorage.getItem('AuthToken'))) : false);\r\n\r\n\r\nexport const useAuth = () => {\r\n    const [auth, setAuth] = useStore(authStore);\r\n\r\n    return {\r\n        auth, setAuth,\r\n        login(AuthToken: string) {\r\n            setAuth(AuthToken);\r\n        },\r\n        logout() {\r\n            localStorage.clear()\r\n            sessionStorage.clear()\r\n            setAuth(null);\r\n        },\r\n    }\r\n};","import { Store, useStore } from \"./Store\";\r\nimport getlevel from \"../utils/api/getlevel\";\r\nimport postlevel from \"../utils/api/postlevel\";\r\nimport editlevel from \"../utils/api/editlevel\";\r\nimport deletelevel from \"../utils/api/deletelevel\";\r\n\r\nexport class leveldetailsItem {\r\n\r\n    id: String;\r\n    l_level: String;\r\n    l_icon: String;\r\n    l_qrcode: String;\r\n    l_title: String;\r\n    l_stitle: String;\r\n    l_body: String;\r\n    l_bodytype: String;\r\n    l_bodyoptions: String;\r\n    locations: boolean;\r\n    l_media: String;\r\n    l_misc: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n    SubLevelData: String;\r\n    GameDataLog: any;\r\n    unlock_after: String;\r\n    completion_image: String;\r\n    clue_image: String;\r\n    l_qr_id: String;\r\n    scan_complete: String;\r\n    progress: String;\r\n    is_locked: String;\r\n\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        l_level: String;\r\n        l_icon: String;\r\n        l_qrcode: String;\r\n        l_title: String;\r\n        l_stitle: String;\r\n        l_body: String;\r\n        l_bodytype: String;\r\n        l_bodyoptions: String;\r\n        locations: boolean;\r\n        l_media: String;\r\n        l_misc: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n        SubLevelData: any;\r\n        GameDataLog: any;\r\n        unlock_after: String;\r\n        completion_image: String;\r\n        clue_image: String;\r\n        l_qr_id: String;\r\n        scan_complete: String;\r\n        progress: String;\r\n        is_locked: String;\r\n\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.l_level = o.l_level;\r\n        this.l_icon = o.l_icon;\r\n        this.l_qrcode = o.l_qrcode;\r\n        this.l_title = o.l_title;\r\n        this.l_stitle = o.l_stitle;\r\n        this.l_body = o.l_body;\r\n        this.l_bodytype = o.l_bodytype;\r\n        this.l_bodyoptions = o.l_bodyoptions;\r\n        this.locations = o.locations;\r\n        this.l_media = o.l_media;\r\n        this.l_misc = o.l_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n        this.SubLevelData = o.SubLevelData;\r\n        this.GameDataLog = o.GameDataLog;\r\n\r\n        this.unlock_after = o.unlock_after;\r\n        this.completion_image = o.completion_image;\r\n        this.clue_image = o.clue_image;\r\n        this.l_qr_id = o.l_qr_id;\r\n        this.scan_complete = o.scan_complete;\r\n        this.progress = o.progress;\r\n        this.is_locked = o.is_locked;\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const levelStore = new Store<levelItem[] | false>(false);\r\n\r\nexport const levelstore = () => {\r\n    const [level, setlevel] = useStore(levelStore);\r\n\r\n    return {\r\n        level, setlevel,\r\n\r\n        async loadlevel() {\r\n            await getlevel(\"\").then(\r\n                (data) => {\r\n                    setlevel(data.data.results);\r\n                }\r\n            )\r\n        },\r\n        async loadlevelwithid(id: any) {\r\n            await getlevel(id).then(\r\n                (data) => {\r\n                    setlevel(data.data.results);\r\n                    console.log(data.data.results);\r\n\r\n                }\r\n            )\r\n\r\n        },\r\n        async postlevel(data: any) {\r\n            await postlevel(data).then((res) => {\r\n                console.log(res);\r\n                setlevel((oldArray: any) => [...oldArray, res.data]);\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async editlevel(id: any, data: any) {\r\n            await editlevel(id, data).then((res) => {\r\n                console.log(res);\r\n                setlevel((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.l_level = data.l_level\r\n                            x.instance_id = data.instance_id\r\n                            x.l_icon = data.l_icon\r\n                            x.l_qrcode = data.l_qrcode\r\n                            x.l_title = data.l_title\r\n                            x.l_stitle = data.l_stitle\r\n                            x.l_body = data.l_body\r\n                            x.l_bodytype = data.l_bodytype\r\n                            x.l_bodyoptions = data.l_bodyoptions\r\n                            x.locations = data.locations\r\n                            x.l_media = data.l_media\r\n                            x.l_misc = data.l_misc\r\n                            x.completion_image = data.completion_image\r\n                            x.clue_image = data.clue_image\r\n                            x.l_qr_id = data.l_qr_id\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async deletelevel(id: any) {\r\n            await deletelevel(id).then((res) => {\r\n                console.log(res);\r\n                setlevel(level && level.filter(ele => ele.id !== id))\r\n            }).catch((res) => {\r\n                console.log(res);\r\n            })\r\n        }\r\n    }\r\n}","import { Store, useStore } from \"./Store\";\r\nimport getuser from \"../utils/api/getuser\";\r\nimport edituser from \"../utils/api/edituser\";\r\n\r\nexport class userItem {\r\n\r\n    id: String;\r\n    image: String;\r\n    firstname: String;\r\n    lastname: String;\r\n    email: String;\r\n    address: String;\r\n    dob: String;\r\n    user_type: String;\r\n    gender: String;\r\n    auth_type: String;\r\n    photo_url: String;\r\n    dial_code: String;\r\n    phone: String;\r\n    is_deleted: String;\r\n    updated_by: String;\r\n    owned_by: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    created_by: String;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        image: String;\r\n        firstname: String;\r\n        lastname: String;\r\n        email: String;\r\n        address: String;\r\n        dob: String;\r\n        user_type: String;\r\n        gender: String;\r\n        auth_type: String;\r\n        photo_url: String;\r\n        dial_code: String;\r\n        phone: String;\r\n        is_deleted: String;\r\n        updated_by: String;\r\n        owned_by: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        created_by: String;\r\n    }) {\r\n        this.id = o.id;\r\n        this.image = o.image;\r\n        this.firstname = o.firstname;\r\n        this.lastname = o.lastname;\r\n        this.email = o.email;\r\n        this.address = o.address;\r\n        this.dob = o.dob;\r\n        this.user_type = o.user_type;\r\n        this.gender = o.gender;\r\n        this.auth_type = o.auth_type;\r\n        this.photo_url = o.photo_url;\r\n        this.dial_code = o.dial_code;\r\n        this.phone = o.phone;\r\n        this.is_deleted = o.is_deleted;\r\n        this.updated_by = o.updated_by;\r\n        this.owned_by = o.owned_by;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.created_by = o.created_by;\r\n    }\r\n}\r\n\r\nexport const userStore = new Store<userItem[] | false>(false);\r\nexport const userDetail =  new Store<userItem | string>(typeof localStorage === \"undefined\" ? false : localStorage.getItem('UserDetails') ? JSON.parse(String(localStorage.getItem('UserDetails'))) : false);\r\nexport const userstore = () => {\r\n    const [user, setuser] = useStore(userStore);\r\n    const [selfuser, setselfuser] = useStore(userDetail);\r\n\r\n    return {\r\n        user, setuser, selfuser, setselfuser,\r\n\r\n        async loaduser() {\r\n            await getuser().then(\r\n                (data) => { \r\n                    setuser(data.data);\r\n                }\r\n            )\r\n\r\n        },\r\n        async edituser(id: any, data: any) {\r\n            await edituser(id, data).then((res) => { \r\n                setuser((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.image = data.image\r\n                            x.firstname = data.firstname\r\n                            x.lastname = data.lastname\r\n                            x.email = data.email\r\n                            x.address = data.address\r\n                            x.dob = data.dob\r\n                            x.user_type = data.user_type\r\n                            x.gender = data.gender\r\n                            x.auth_type = data.auth_type\r\n                            x.photo_url = data.photo_url\r\n                            x.dial_code = data.dial_code\r\n                            x.phone = data.phone\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n    }\r\n\r\n}","import { Store, useStore } from \"./Store\";\r\nimport getlogo from \"../utils/api/getlogo\";\r\nimport editlogo from \"../utils/api/editlogo\";\r\nimport postlogo from \"../utils/api/postlogo\";\r\nimport deletelogo from \"../utils/api/deletelogo\";\r\nexport class logoItem {\r\n\r\n    id: String;\r\n    i_logo: String;\r\n    position: String;\r\n    section: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        i_logo: String;\r\n        position: String;\r\n        section: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n    }) {\r\n        this.id = o.id;\r\n        this.i_logo = o.i_logo;\r\n        this.position = o.position;\r\n        this.section = o.section;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n    }\r\n}\r\n\r\nexport const logoStore = new Store<logoItem[] | false>(false);\r\n\r\nexport const logostore = () => {\r\n    const [logo, setlogo] = useStore(logoStore);\r\n\r\n    return {\r\n        logo, setlogo,\r\n\r\n        async loadlogo() {\r\n            await getlogo(\"\").then(\r\n                (data) => {\r\n                    setlogo(data.data.results);\r\n                }\r\n            ) \r\n        },\r\n        async loadlogowithid(id: any) {\r\n            await getlogo(id).then(\r\n                (data) => {\r\n                      setlogo(data.data.results);\r\n                }\r\n            )\r\n\r\n        },\r\n        async postlogo(data: any) {\r\n            await postlogo(data).then((res) => {\r\n                   setlogo((oldArray: any) => [...oldArray, res.data]);\r\n\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async editlogo(id: any, data: any) {\r\n            await editlogo(id, data).then((res) => {\r\n                  setlogo((oldarr) => {\r\n                    return (oldarr) && oldarr.map((obj: any) => {\r\n                        const getobj = (o: any) => {\r\n                            let x = o;\r\n                            x.instance_id = data.instance_id\r\n                            x.i_logo = data.i_logo\r\n                            x.position = data.position\r\n                            x.section = data.section\r\n                            return x;\r\n                        }\r\n                        return (String(obj.id) === String(id)) ? getobj(obj) : obj;\r\n                    })\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })\r\n        },\r\n        async deletelogo(id: any) {\r\n            await deletelogo(id).then((res) => {\r\n                   setlogo(logo && logo.filter(ele => ele.id !== id))\r\n            }).catch((res) => {\r\n                console.log(res);\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n ","import { Store, useStore } from \"./Store\";\r\nimport getlogo_arrayposition from \"../utils/api/getlogo_arrayposition\";\r\nimport getlogo_arrayposition_iid from \"utils/api/getlogo_arrayposition_iid\";\r\n\r\nexport class logopositionItem {\r\n\r\n    id: String;\r\n    i_logo: String;\r\n    position: String;\r\n    section: String\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        i_logo: String;\r\n        position: String;\r\n        section: String\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n    }) {\r\n        this.id = o.id;\r\n        this.i_logo = o.i_logo;\r\n        this.position = o.position;\r\n        this.section = o.section;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n    }\r\n}\r\n\r\nexport class temp {\r\n    section1: logopositionItem[][]\r\n    section2: logopositionItem[][]\r\n    section3: logopositionItem[][]\r\n    constructor(o: {\r\n        section1: logopositionItem[][];\r\n        section2: logopositionItem[][];\r\n        section3: logopositionItem[][];\r\n    }) {\r\n        this.section1 = o.section1;\r\n        this.section2 = o.section2;\r\n        this.section3 = o.section3;\r\n    }\r\n}\r\n\r\nexport const logopositionStore = new Store<temp | false>(false);\r\n\r\nexport const logopositionstore = () => {\r\n    const [logoposition, setlogoposition] = useStore(logopositionStore);\r\n\r\n    return {\r\n        logoposition, setlogoposition,\r\n\r\n        async loadlogo_arrayposition() {\r\n            await getlogo_arrayposition().then(\r\n                (data) => {\r\n                    setlogoposition(data.data.results);\r\n                }\r\n            )\r\n        },\r\n        async loadlogo_arrayposition_iid(id: any) {\r\n            await getlogo_arrayposition_iid(id).then(\r\n                (data) => {\r\n                    setlogoposition(data.data.results);\r\n                }\r\n            )\r\n        },\r\n    }\r\n\r\n}","import { Store, useStore } from \"./Store\";\r\nimport getleveldetails from \"../utils/api/getleveldetails\";\r\n\r\n\r\nexport class leveldetailsItem {\r\n\r\n    id: String;\r\n    l_level: String;\r\n    l_icon: String;\r\n    l_qrcode: String;\r\n    l_title: String;\r\n    l_stitle: String;\r\n    l_body: String;\r\n    l_bodytype: String;\r\n    l_bodyoptions: String;\r\n    locations: boolean;\r\n    l_media: String;\r\n    l_misc: String;\r\n    created_at: String;\r\n    updated_at: String;\r\n    instance_id: String;\r\n    SubLevelData: String;\r\n    GameDataLog: any;\r\n    unlock_after: String;\r\n    completion_image: String;\r\n    clue_image: String;\r\n    l_qr_id: String;\r\n    scan_complete: String;\r\n    progress: String;\r\n    is_locked: String;\r\n\r\n\r\n    constructor(o: {\r\n        id: String;\r\n        l_level: String;\r\n        l_icon: String;\r\n        l_qrcode: String;\r\n        l_title: String;\r\n        l_stitle: String;\r\n        l_body: String;\r\n        l_bodytype: String;\r\n        l_bodyoptions: String;\r\n        locations: boolean;\r\n        l_media: String;\r\n        l_misc: String;\r\n        created_at: String;\r\n        updated_at: String;\r\n        instance_id: String;\r\n        SubLevelData: any;\r\n        GameDataLog: any;\r\n        unlock_after: String;\r\n        completion_image: String;\r\n        clue_image: String;\r\n        l_qr_id: String;\r\n        scan_complete: String;\r\n        progress: String;\r\n        is_locked: String;\r\n\r\n\r\n    }) {\r\n        this.id = o.id;\r\n        this.l_level = o.l_level;\r\n        this.l_icon = o.l_icon;\r\n        this.l_qrcode = o.l_qrcode;\r\n        this.l_title = o.l_title;\r\n        this.l_stitle = o.l_stitle;\r\n        this.l_body = o.l_body;\r\n        this.l_bodytype = o.l_bodytype;\r\n        this.l_bodyoptions = o.l_bodyoptions;\r\n        this.locations = o.locations;\r\n        this.l_media = o.l_media;\r\n        this.l_misc = o.l_misc;\r\n        this.created_at = o.created_at;\r\n        this.updated_at = o.updated_at;\r\n        this.instance_id = o.instance_id;\r\n        this.SubLevelData = o.SubLevelData;\r\n        this.GameDataLog = o.GameDataLog;\r\n\r\n        this.unlock_after = o.unlock_after;\r\n        this.completion_image = o.completion_image;\r\n        this.clue_image = o.clue_image;\r\n        this.l_qr_id = o.l_qr_id;\r\n        this.scan_complete = o.scan_complete;\r\n        this.progress = o.progress;\r\n        this.is_locked = o.is_locked;\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const leveldetailsStore = new Store<leveldetailsItem[] | false>(false);\r\n\r\nexport const leveldetailslstore = () => {\r\n    const [leveldetails, setleveldetails] = useStore(leveldetailsStore);\r\n\r\n    return {\r\n        leveldetails, setleveldetails,\r\n\r\n        async loadleveldetails() {\r\n            await getleveldetails().then(\r\n                (data) => {\r\n                    console.log(data.data.results);\r\n\r\n                    setleveldetails(data.data.results);\r\n                }\r\n            )\r\n        }\r\n    }\r\n}"],"sourceRoot":""}